{"ast":null,"code":"import { FlagQualifier } from \"../qualifiers/flag/FlagQualifier\";\nimport { Qualifier } from \"./qualifier/Qualifier\";\nimport { mapToSortedArray } from \"./utils/dataStructureUtils\";\n/**\n * @summary SDK\n * @memberOf SDK\n * @description Defines the category of transformation to perform.\n */\nclass Action {\n  constructor() {\n    // We're using map, to overwrite existing keys. for example:\n    // addParam(w_100).addQualifier(w_200) should result in w_200. and not w_100,w_200\n    this.qualifiers = new Map();\n    // Unlike regular qualifiers, there can be multiple flags in each url component /fl_1,fl_2/\n    // If the falgs are added to the qualifiers map, only a single flag could exist in a component (it's a map)\n    // So flags are stored separately until the very end because of that reason\n    this.flags = [];\n    this.delimiter = ','; // {qualifier}{delimiter}{qualifier} for example: `${'w_100'}${','}${'c_fill'}`\n    this.actionTag = ''; // A custom name tag to identify this action in the future\n  }\n\n  prepareQualifiers() {}\n  /**\n   * @description Returns the custom name tag that was given to this action\n   * @return {string}\n   */\n  getActionTag() {\n    return this.actionTag;\n  }\n  /**\n   * @description Sets the custom name tag for this action\n   * @return {this}\n   */\n  setActionTag(tag) {\n    this.actionTag = tag;\n    return this;\n  }\n  /**\n   * @description Calls toString() on all child qualifiers (implicitly by using .join()).\n   * @return {string}\n   */\n  toString() {\n    this.prepareQualifiers();\n    return mapToSortedArray(this.qualifiers, this.flags).join(this.delimiter);\n  }\n  /**\n   * @description Adds the parameter to the action.\n   * @param {SDK.Qualifier} qualifier\n   * @return {this}\n   */\n  addQualifier(qualifier) {\n    // if string, find the key and value\n    if (typeof qualifier === 'string') {\n      const [key, value] = qualifier.toLowerCase().split('_');\n      if (key === 'fl') {\n        // if string qualifier is a flag, store it in the flags arrays\n        this.flags.push(new FlagQualifier(value));\n      } else {\n        // if the string qualifier is not a flag, create a new qualifier from it\n        this.qualifiers.set(key, new Qualifier(key, value));\n      }\n    } else {\n      // if a qualifier object, insert to the qualifiers map\n      this.qualifiers.set(qualifier.key, qualifier);\n    }\n    return this;\n  }\n  /**\n   * @description Adds a flag to the current action.\n   * @param {Qualifiers.Flag} flag\n   * @return {this}\n   */\n  addFlag(flag) {\n    if (typeof flag === 'string') {\n      this.flags.push(new FlagQualifier(flag));\n    } else {\n      this.flags.push(flag);\n    }\n    return this;\n  }\n  addValueToQualifier(qualifierKey, qualifierValue) {\n    this.qualifiers.get(qualifierKey).addValue(qualifierValue);\n    return this;\n  }\n}\nexport { Action };","map":{"version":3,"names":["FlagQualifier","Qualifier","mapToSortedArray","Action","constructor","qualifiers","Map","flags","delimiter","actionTag","prepareQualifiers","getActionTag","setActionTag","tag","toString","join","addQualifier","qualifier","key","value","toLowerCase","split","push","set","addFlag","flag","addValueToQualifier","qualifierKey","qualifierValue","get","addValue"],"sources":["D:/VSCode/Project_Market_Place/client/node_modules/@cloudinary/base/internal/Action.js"],"sourcesContent":["import { FlagQualifier } from \"../qualifiers/flag/FlagQualifier\";\nimport { Qualifier } from \"./qualifier/Qualifier\";\nimport { mapToSortedArray } from \"./utils/dataStructureUtils\";\n/**\n * @summary SDK\n * @memberOf SDK\n * @description Defines the category of transformation to perform.\n */\nclass Action {\n    constructor() {\n        // We're using map, to overwrite existing keys. for example:\n        // addParam(w_100).addQualifier(w_200) should result in w_200. and not w_100,w_200\n        this.qualifiers = new Map();\n        // Unlike regular qualifiers, there can be multiple flags in each url component /fl_1,fl_2/\n        // If the falgs are added to the qualifiers map, only a single flag could exist in a component (it's a map)\n        // So flags are stored separately until the very end because of that reason\n        this.flags = [];\n        this.delimiter = ','; // {qualifier}{delimiter}{qualifier} for example: `${'w_100'}${','}${'c_fill'}`\n        this.actionTag = ''; // A custom name tag to identify this action in the future\n    }\n    prepareQualifiers() { }\n    /**\n     * @description Returns the custom name tag that was given to this action\n     * @return {string}\n     */\n    getActionTag() {\n        return this.actionTag;\n    }\n    /**\n     * @description Sets the custom name tag for this action\n     * @return {this}\n     */\n    setActionTag(tag) {\n        this.actionTag = tag;\n        return this;\n    }\n    /**\n     * @description Calls toString() on all child qualifiers (implicitly by using .join()).\n     * @return {string}\n     */\n    toString() {\n        this.prepareQualifiers();\n        return mapToSortedArray(this.qualifiers, this.flags).join(this.delimiter);\n    }\n    /**\n     * @description Adds the parameter to the action.\n     * @param {SDK.Qualifier} qualifier\n     * @return {this}\n     */\n    addQualifier(qualifier) {\n        // if string, find the key and value\n        if (typeof qualifier === 'string') {\n            const [key, value] = qualifier.toLowerCase().split('_');\n            if (key === 'fl') {\n                // if string qualifier is a flag, store it in the flags arrays\n                this.flags.push(new FlagQualifier(value));\n            }\n            else {\n                // if the string qualifier is not a flag, create a new qualifier from it\n                this.qualifiers.set(key, new Qualifier(key, value));\n            }\n        }\n        else {\n            // if a qualifier object, insert to the qualifiers map\n            this.qualifiers.set(qualifier.key, qualifier);\n        }\n        return this;\n    }\n    /**\n     * @description Adds a flag to the current action.\n     * @param {Qualifiers.Flag} flag\n     * @return {this}\n     */\n    addFlag(flag) {\n        if (typeof flag === 'string') {\n            this.flags.push(new FlagQualifier(flag));\n        }\n        else {\n            this.flags.push(flag);\n        }\n        return this;\n    }\n    addValueToQualifier(qualifierKey, qualifierValue) {\n        this.qualifiers.get(qualifierKey).addValue(qualifierValue);\n        return this;\n    }\n}\nexport { Action };\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,kCAAkC;AAChE,SAASC,SAAS,QAAQ,uBAAuB;AACjD,SAASC,gBAAgB,QAAQ,4BAA4B;AAC7D;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,CAAC;EACTC,WAAWA,CAAA,EAAG;IACV;IACA;IACA,IAAI,CAACC,UAAU,GAAG,IAAIC,GAAG,CAAC,CAAC;IAC3B;IACA;IACA;IACA,IAAI,CAACC,KAAK,GAAG,EAAE;IACf,IAAI,CAACC,SAAS,GAAG,GAAG,CAAC,CAAC;IACtB,IAAI,CAACC,SAAS,GAAG,EAAE,CAAC,CAAC;EACzB;;EACAC,iBAAiBA,CAAA,EAAG,CAAE;EACtB;AACJ;AACA;AACA;EACIC,YAAYA,CAAA,EAAG;IACX,OAAO,IAAI,CAACF,SAAS;EACzB;EACA;AACJ;AACA;AACA;EACIG,YAAYA,CAACC,GAAG,EAAE;IACd,IAAI,CAACJ,SAAS,GAAGI,GAAG;IACpB,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;EACIC,QAAQA,CAAA,EAAG;IACP,IAAI,CAACJ,iBAAiB,CAAC,CAAC;IACxB,OAAOR,gBAAgB,CAAC,IAAI,CAACG,UAAU,EAAE,IAAI,CAACE,KAAK,CAAC,CAACQ,IAAI,CAAC,IAAI,CAACP,SAAS,CAAC;EAC7E;EACA;AACJ;AACA;AACA;AACA;EACIQ,YAAYA,CAACC,SAAS,EAAE;IACpB;IACA,IAAI,OAAOA,SAAS,KAAK,QAAQ,EAAE;MAC/B,MAAM,CAACC,GAAG,EAAEC,KAAK,CAAC,GAAGF,SAAS,CAACG,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC;MACvD,IAAIH,GAAG,KAAK,IAAI,EAAE;QACd;QACA,IAAI,CAACX,KAAK,CAACe,IAAI,CAAC,IAAItB,aAAa,CAACmB,KAAK,CAAC,CAAC;MAC7C,CAAC,MACI;QACD;QACA,IAAI,CAACd,UAAU,CAACkB,GAAG,CAACL,GAAG,EAAE,IAAIjB,SAAS,CAACiB,GAAG,EAAEC,KAAK,CAAC,CAAC;MACvD;IACJ,CAAC,MACI;MACD;MACA,IAAI,CAACd,UAAU,CAACkB,GAAG,CAACN,SAAS,CAACC,GAAG,EAAED,SAAS,CAAC;IACjD;IACA,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;EACIO,OAAOA,CAACC,IAAI,EAAE;IACV,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;MAC1B,IAAI,CAAClB,KAAK,CAACe,IAAI,CAAC,IAAItB,aAAa,CAACyB,IAAI,CAAC,CAAC;IAC5C,CAAC,MACI;MACD,IAAI,CAAClB,KAAK,CAACe,IAAI,CAACG,IAAI,CAAC;IACzB;IACA,OAAO,IAAI;EACf;EACAC,mBAAmBA,CAACC,YAAY,EAAEC,cAAc,EAAE;IAC9C,IAAI,CAACvB,UAAU,CAACwB,GAAG,CAACF,YAAY,CAAC,CAACG,QAAQ,CAACF,cAAc,CAAC;IAC1D,OAAO,IAAI;EACf;AACJ;AACA,SAASzB,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}