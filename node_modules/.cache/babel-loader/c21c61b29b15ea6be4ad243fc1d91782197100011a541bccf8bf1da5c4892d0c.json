{"ast":null,"code":"import { Action } from \"../../internal/Action\";\nimport { Transformation } from \"../../transformation/Transformation\";\n/**\n * @description Class for Concatenating another video.\n *\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_manipulation_and_delivery#concatenating_videos | Concatenating videos}\n * @extends SDK.Action\n * @memberOf Actions.VideoEdit\n * @see Visit {@link Actions.VideoEdit|VideoEdit} for an example\n */\nclass ConcatenateAction extends Action {\n  /**\n   *\n   * @param {Qualifiers.Source.VideoSource | Qualifiers.Source.ImageSource | Qualifiers.Source.FetchSource} source\n   *         the Source to concatenate\n   */\n  constructor(source) {\n    super();\n    this.concatSource = source;\n  }\n  /**\n   * @description Sets the transition between a video and a concatenated source\n   * @param {Qualifiers.Transition.VideoSource} source The source to concatenate.\n   * @return {this}\n   */\n  transition(source) {\n    this._transition = source;\n    return this;\n  }\n  /**\n   * @description Prepend the concatenated video - Adds the video before the original\n   * @return {this}\n   */\n  prepend() {\n    this._prepend = true;\n    return this;\n  }\n  /**\n   * The duration in seconds\n   * @param {number} sec\n   * @return {this}\n   */\n  duration(sec) {\n    this._duration = sec;\n    return this;\n  }\n  /**\n   * @description Get the transitionString for the toString() method\n   * @return {string}\n   */\n  getTransitionString() {\n    const transTx = this._transition.getTransformation();\n    return [`e_transition,${this._transition.getOpenSourceString('l')}`, transTx && transTx.toString(), 'fl_layer_apply'].filter(a => a).join('/');\n  }\n  /**\n   * @description Get the string representation of the Concatenation action\n   */\n  toString() {\n    /*\n     *\n     * The toString() method is composed of several steps due to the complex nature of the concatenate transformation.\n     *\n     * First, we calculate the open and close parts of the top-level transformation:\n     *   - {open}/{sourceTransformation}/{close}\n     *\n     * Unlike a regular overlay, there are multiple 'bits' appended to the open and close parts of the tx.\n     * - duration (du_) might be prepended on the opening of the layer (du_5,l_sample)\n     * - fl_splice is also added, but only if a transition is not needed.\n     *\n     * once we've calculated the open and close parts, we now need to deal with the Transition.\n     * the transition is an inner transformation on the source with a special effect (e_transition) appended to it.\n     *\n     * To calculate the transition string, we need to take the transformation from the source(assuming it has one)\n     */\n    // Calculate the open part\n    const open = [this._duration && `du_${this._duration}`, !this._transition && `fl_splice`, `${this.concatSource.getOpenSourceString('l')}`].filter(a => a).join(',');\n    // Calculate the open part\n    const close = ['fl_layer_apply', this._prepend && 'so_0'].filter(a => a).join(',');\n    // Calculate the Transition part\n    let concatSourceTx;\n    if (this.concatSource.getTransformation()) {\n      concatSourceTx = this.concatSource.getTransformation();\n    } else {\n      concatSourceTx = new Transformation();\n    }\n    if (this._transition) {\n      concatSourceTx.addTransformation(this.getTransitionString());\n    }\n    // Put it all together, the transition is already part of the concatSourceTx\n    return [open, concatSourceTx.toString(), close].filter(a => a).join('/');\n  }\n}\nexport default ConcatenateAction;","map":{"version":3,"names":["Action","Transformation","ConcatenateAction","constructor","source","concatSource","transition","_transition","prepend","_prepend","duration","sec","_duration","getTransitionString","transTx","getTransformation","getOpenSourceString","toString","filter","a","join","open","close","concatSourceTx","addTransformation"],"sources":["D:/VSCode/Project_Market_Place/client/node_modules/@cloudinary/base/actions/videoEdit/ConcatenateAction.js"],"sourcesContent":["import { Action } from \"../../internal/Action\";\nimport { Transformation } from \"../../transformation/Transformation\";\n/**\n * @description Class for Concatenating another video.\n *\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_manipulation_and_delivery#concatenating_videos | Concatenating videos}\n * @extends SDK.Action\n * @memberOf Actions.VideoEdit\n * @see Visit {@link Actions.VideoEdit|VideoEdit} for an example\n */\nclass ConcatenateAction extends Action {\n    /**\n     *\n     * @param {Qualifiers.Source.VideoSource | Qualifiers.Source.ImageSource | Qualifiers.Source.FetchSource} source\n     *         the Source to concatenate\n     */\n    constructor(source) {\n        super();\n        this.concatSource = source;\n    }\n    /**\n     * @description Sets the transition between a video and a concatenated source\n     * @param {Qualifiers.Transition.VideoSource} source The source to concatenate.\n     * @return {this}\n     */\n    transition(source) {\n        this._transition = source;\n        return this;\n    }\n    /**\n     * @description Prepend the concatenated video - Adds the video before the original\n     * @return {this}\n     */\n    prepend() {\n        this._prepend = true;\n        return this;\n    }\n    /**\n     * The duration in seconds\n     * @param {number} sec\n     * @return {this}\n     */\n    duration(sec) {\n        this._duration = sec;\n        return this;\n    }\n    /**\n     * @description Get the transitionString for the toString() method\n     * @return {string}\n     */\n    getTransitionString() {\n        const transTx = this._transition.getTransformation();\n        return [\n            `e_transition,${this._transition.getOpenSourceString('l')}`,\n            transTx && transTx.toString(),\n            'fl_layer_apply'\n        ].filter((a) => a).join('/');\n    }\n    /**\n     * @description Get the string representation of the Concatenation action\n     */\n    toString() {\n        /*\n         *\n         * The toString() method is composed of several steps due to the complex nature of the concatenate transformation.\n         *\n         * First, we calculate the open and close parts of the top-level transformation:\n         *   - {open}/{sourceTransformation}/{close}\n         *\n         * Unlike a regular overlay, there are multiple 'bits' appended to the open and close parts of the tx.\n         * - duration (du_) might be prepended on the opening of the layer (du_5,l_sample)\n         * - fl_splice is also added, but only if a transition is not needed.\n         *\n         * once we've calculated the open and close parts, we now need to deal with the Transition.\n         * the transition is an inner transformation on the source with a special effect (e_transition) appended to it.\n         *\n         * To calculate the transition string, we need to take the transformation from the source(assuming it has one)\n         */\n        // Calculate the open part\n        const open = [\n            this._duration && `du_${this._duration}`,\n            !this._transition && `fl_splice`,\n            `${this.concatSource.getOpenSourceString('l')}`\n        ].filter((a) => a).join(',');\n        // Calculate the open part\n        const close = [\n            'fl_layer_apply',\n            this._prepend && 'so_0'\n        ].filter((a) => a).join(',');\n        // Calculate the Transition part\n        let concatSourceTx;\n        if (this.concatSource.getTransformation()) {\n            concatSourceTx = this.concatSource.getTransformation();\n        }\n        else {\n            concatSourceTx = new Transformation();\n        }\n        if (this._transition) {\n            concatSourceTx.addTransformation(this.getTransitionString());\n        }\n        // Put it all together, the transition is already part of the concatSourceTx\n        return [\n            open,\n            concatSourceTx.toString(),\n            close\n        ].filter((a) => a).join('/');\n    }\n}\nexport default ConcatenateAction;\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,cAAc,QAAQ,qCAAqC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,SAASF,MAAM,CAAC;EACnC;AACJ;AACA;AACA;AACA;EACIG,WAAWA,CAACC,MAAM,EAAE;IAChB,KAAK,CAAC,CAAC;IACP,IAAI,CAACC,YAAY,GAAGD,MAAM;EAC9B;EACA;AACJ;AACA;AACA;AACA;EACIE,UAAUA,CAACF,MAAM,EAAE;IACf,IAAI,CAACG,WAAW,GAAGH,MAAM;IACzB,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;EACII,OAAOA,CAAA,EAAG;IACN,IAAI,CAACC,QAAQ,GAAG,IAAI;IACpB,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;EACIC,QAAQA,CAACC,GAAG,EAAE;IACV,IAAI,CAACC,SAAS,GAAGD,GAAG;IACpB,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;EACIE,mBAAmBA,CAAA,EAAG;IAClB,MAAMC,OAAO,GAAG,IAAI,CAACP,WAAW,CAACQ,iBAAiB,CAAC,CAAC;IACpD,OAAO,CACF,gBAAe,IAAI,CAACR,WAAW,CAACS,mBAAmB,CAAC,GAAG,CAAE,EAAC,EAC3DF,OAAO,IAAIA,OAAO,CAACG,QAAQ,CAAC,CAAC,EAC7B,gBAAgB,CACnB,CAACC,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;EAChC;EACA;AACJ;AACA;EACIH,QAAQA,CAAA,EAAG;IACP;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ;IACA,MAAMI,IAAI,GAAG,CACT,IAAI,CAACT,SAAS,IAAK,MAAK,IAAI,CAACA,SAAU,EAAC,EACxC,CAAC,IAAI,CAACL,WAAW,IAAK,WAAU,EAC/B,GAAE,IAAI,CAACF,YAAY,CAACW,mBAAmB,CAAC,GAAG,CAAE,EAAC,CAClD,CAACE,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;IAC5B;IACA,MAAME,KAAK,GAAG,CACV,gBAAgB,EAChB,IAAI,CAACb,QAAQ,IAAI,MAAM,CAC1B,CAACS,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;IAC5B;IACA,IAAIG,cAAc;IAClB,IAAI,IAAI,CAAClB,YAAY,CAACU,iBAAiB,CAAC,CAAC,EAAE;MACvCQ,cAAc,GAAG,IAAI,CAAClB,YAAY,CAACU,iBAAiB,CAAC,CAAC;IAC1D,CAAC,MACI;MACDQ,cAAc,GAAG,IAAItB,cAAc,CAAC,CAAC;IACzC;IACA,IAAI,IAAI,CAACM,WAAW,EAAE;MAClBgB,cAAc,CAACC,iBAAiB,CAAC,IAAI,CAACX,mBAAmB,CAAC,CAAC,CAAC;IAChE;IACA;IACA,OAAO,CACHQ,IAAI,EACJE,cAAc,CAACN,QAAQ,CAAC,CAAC,EACzBK,KAAK,CACR,CAACJ,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;EAChC;AACJ;AACA,eAAelB,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}