{"ast":null,"code":"import { BaseTextSource } from \"./BaseTextSource\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.SubtitlesSource}\n * @description Defines how to manipulate a Subtitles layer\n */\nclass SubtitlesSource extends BaseTextSource {\n  constructor(fileName) {\n    super(fileName);\n    this.type = 'subtitles'; // used within TextSource for l/u_subtitles:\n  }\n  /**\n   * @description Set the textStyle for the subtitles layer\n   * @param {TextStyle} textStyle\n   */\n  textStyle(textStyle) {\n    this._textStyle = textStyle;\n    return this;\n  }\n  /**\n   *\n   * @description Used within getOpenSourceString of TextSource, this function overwrites the default encoding behaviour\n   * Subtitle file names require a different encoding than texts\n   * @param text\n   * @example\n   * encodeText('foo/bar'); // -> foo:bar\n   */\n  encodeText(text) {\n    return text.replace(/\\//g, ':');\n  }\n}\nexport { SubtitlesSource };","map":{"version":3,"names":["BaseTextSource","SubtitlesSource","constructor","fileName","type","textStyle","_textStyle","encodeText","text","replace"],"sources":["D:/VSCode/Project_Market_Place/client/node_modules/@cloudinary/base/qualifiers/source/sourceTypes/SubtitlesSource.js"],"sourcesContent":["import { BaseTextSource } from \"./BaseTextSource\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.SubtitlesSource}\n * @description Defines how to manipulate a Subtitles layer\n */\nclass SubtitlesSource extends BaseTextSource {\n    constructor(fileName) {\n        super(fileName);\n        this.type = 'subtitles'; // used within TextSource for l/u_subtitles:\n    }\n    /**\n     * @description Set the textStyle for the subtitles layer\n     * @param {TextStyle} textStyle\n     */\n    textStyle(textStyle) {\n        this._textStyle = textStyle;\n        return this;\n    }\n    /**\n     *\n     * @description Used within getOpenSourceString of TextSource, this function overwrites the default encoding behaviour\n     * Subtitle file names require a different encoding than texts\n     * @param text\n     * @example\n     * encodeText('foo/bar'); // -> foo:bar\n     */\n    encodeText(text) {\n        return text.replace(/\\//g, ':');\n    }\n}\nexport { SubtitlesSource };\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,SAASD,cAAc,CAAC;EACzCE,WAAWA,CAACC,QAAQ,EAAE;IAClB,KAAK,CAACA,QAAQ,CAAC;IACf,IAAI,CAACC,IAAI,GAAG,WAAW,CAAC,CAAC;EAC7B;EACA;AACJ;AACA;AACA;EACIC,SAASA,CAACA,SAAS,EAAE;IACjB,IAAI,CAACC,UAAU,GAAGD,SAAS;IAC3B,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIE,UAAUA,CAACC,IAAI,EAAE;IACb,OAAOA,IAAI,CAACC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;EACnC;AACJ;AACA,SAASR,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}