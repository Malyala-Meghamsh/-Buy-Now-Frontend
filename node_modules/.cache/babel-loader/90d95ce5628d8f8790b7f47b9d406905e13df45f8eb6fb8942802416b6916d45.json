{"ast":null,"code":"/**\n * @description Defines transformations for delivering your assets without changing the visual or audio experience for the end user.\n * @memberOf Actions\n * @namespace Delivery\n * @example\n * See the examples under every method\n */\nimport { DeliveryFormat } from \"./delivery/DeliveryFormat\";\nimport { DeliveryQualityAction } from \"./delivery/DeliveryQuality\";\nimport { toFloatAsString } from \"../internal/utils/toFloatAsString\";\nimport { DeliveryColorSpaceFromICC } from \"./delivery/DeliveryColorSpaceFromICC\";\nimport { DeliveryAction } from \"./delivery/DeliveryAction\";\n/**\n * @summary action\n * @description Defines the format of the delivered asset.\n *\n * <b>Learn more:</b>\n * {@link https://cloudinary.com/documentation/image_transformations#image_format_support | Image formats}\n * {@link https://cloudinary.com/documentation/video_manipulation_and_delivery#transcoding_video_to_other_formats | Video formats}\n *\n * @memberOf Actions.Delivery\n * @param {string} format The file format. For a list of supported format types see {@link Qualifiers.Format| format types} for\n * possible values\n * @return {Actions.Delivery.DeliveryFormat}\n * @example\n * import {Cloudinary} from \"@cloudinary/base\";\n * import {format} from \"@cloudinary/base/actions/delivery\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.delivery(\n *  format('jpg'),\n * );\n *\n */\nfunction format(format) {\n  return new DeliveryFormat('f', format);\n}\n/**\n * @summary action\n * @description Deliver the image in the specified device pixel ratio.\n * @memberOf Actions.Delivery\n * @param {string} dpr The DPR (Device Pixel Ratio). Any positive float value.\n * @return {Actions.Delivery.DeliveryAction}\n * @example\n * import {Cloudinary} from \"@cloudinary/base\";\n * import {dpr} from \"@cloudinary/base/actions/delivery\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.delivery(\n *  dpr('2.0'),\n * );\n */\nfunction dpr(dpr) {\n  // toFloatAsString is used to ensure 1 turns into 1.0\n  return new DeliveryAction('dpr', toFloatAsString(dpr));\n}\n/**\n * @summary action\n * @description Controls the quality of the delivered image or video.\n *\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_optimization#how_to_optimize_image_quality | Image quality}\n *  {@link https://cloudinary.com/documentation/video_manipulation_and_delivery#quality_control | Video quality}\n * @memberOf Actions.Delivery\n * @param {string | number | Qualifiers.Quality} qualityType For a list of supported quality types see {@link Qualifiers.Quality| quality types} for\n * possible values.\n * @return {Actions.Delivery.DeliveryQualityAction}\n * @example\n * import {Cloudinary} from \"@cloudinary/base\";\n * import {quality} from \"@cloudinary/base/actions/delivery\";\n * import {quality} from \"@cloudinary/base/qualifiers/quantity\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.delivery(\n *  quality('auto'),\n * );\n */\nfunction quality(qualityType) {\n  return new DeliveryQualityAction(qualityType);\n}\n/**\n * @summary action\n * @description Controls the density to use when delivering an image or when converting a vector file such as a PDF or EPS\n * document to a web image delivery format.\n * @memberOf Actions.Delivery\n * @param {number | string} value The density in dpi.\n * @return {Actions.Delivery.DeliveryAction}\n * @example\n * import {Cloudinary} from \"@cloudinary/base\";\n * import {density} from \"@cloudinary/base/actions/delivery\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.delivery(\n *  density(150),\n * );\n */\nfunction density(value) {\n  return new DeliveryAction('dn', value);\n}\n/**\n * @summary action\n * @description Default images can be used in the case that a requested image does not exist.\n * @memberOf Actions.Delivery\n * @param {string} publicIdWithExtension Default image public ID\n * @return {Actions.Delivery.DeliveryAction}\n * @example\n * import {Cloudinary} from \"@cloudinary/base\";\n * import {defaultImage} from \"@cloudinary/base/actions/delivery\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.delivery(\n *  defaultImage('sample'),\n * );\n */\nfunction defaultImage(publicIdWithExtension) {\n  return new DeliveryAction('d', publicIdWithExtension);\n}\n/**\n * @summary action\n * @description Controls the color space used for the delivered image.\n * @memberOf Actions.Delivery\n * @param {string | Qualifiers.ColorSpace} mode The color space.\n * @return {Actions.Delivery.DeliveryAction}\n * @example\n * import {Cloudinary} from \"@cloudinary/base\";\n * import {colorSpace} from \"@cloudinary/base/actions/delivery\";\n * import {trueColor} from \"@cloudinary/base/qualifiers/colorSpace\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.delivery(\n *  colorSpace(trueColor()),\n * );\n */\nfunction colorSpace(mode) {\n  return new DeliveryAction('cs', mode);\n}\n/**\n * @summary action\n * @description Specifies the ICC profile to use for the color space.\n * The ICC file must be uploaded to your account as a raw, authenticated file.\n * @memberOf Actions.Delivery\n * @param {string} publicId The public ID (including the file extension) of the ICC profile that defines the\n * color space.\n * @return {Actions.Delivery.DeliveryColorSpaceFromICC}\n * @example\n * import {Cloudinary} from \"@cloudinary/base\";\n * import {colorSpaceFromICC} from \"@cloudinary/base/actions/delivery\";\n * import {trueColor} from \"@cloudinary/base/qualifiers/colorSpace\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.delivery(\n *  colorSpaceFromICC('sample.icc'),\n * );\n */\nfunction colorSpaceFromICC(publicId) {\n  return new DeliveryColorSpaceFromICC(publicId);\n}\nconst Delivery = {\n  format,\n  dpr,\n  density,\n  defaultImage,\n  colorSpace,\n  colorSpaceFromICC,\n  quality\n};\nexport { Delivery, format, dpr, quality, density, defaultImage, colorSpace, colorSpaceFromICC };","map":{"version":3,"names":["DeliveryFormat","DeliveryQualityAction","toFloatAsString","DeliveryColorSpaceFromICC","DeliveryAction","format","dpr","quality","qualityType","density","value","defaultImage","publicIdWithExtension","colorSpace","mode","colorSpaceFromICC","publicId","Delivery"],"sources":["D:/VSCode/Project_Market_Place/client/node_modules/@cloudinary/base/actions/delivery.js"],"sourcesContent":["/**\n * @description Defines transformations for delivering your assets without changing the visual or audio experience for the end user.\n * @memberOf Actions\n * @namespace Delivery\n * @example\n * See the examples under every method\n */\nimport { DeliveryFormat } from \"./delivery/DeliveryFormat\";\nimport { DeliveryQualityAction } from \"./delivery/DeliveryQuality\";\nimport { toFloatAsString } from \"../internal/utils/toFloatAsString\";\nimport { DeliveryColorSpaceFromICC } from \"./delivery/DeliveryColorSpaceFromICC\";\nimport { DeliveryAction } from \"./delivery/DeliveryAction\";\n/**\n * @summary action\n * @description Defines the format of the delivered asset.\n *\n * <b>Learn more:</b>\n * {@link https://cloudinary.com/documentation/image_transformations#image_format_support | Image formats}\n * {@link https://cloudinary.com/documentation/video_manipulation_and_delivery#transcoding_video_to_other_formats | Video formats}\n *\n * @memberOf Actions.Delivery\n * @param {string} format The file format. For a list of supported format types see {@link Qualifiers.Format| format types} for\n * possible values\n * @return {Actions.Delivery.DeliveryFormat}\n * @example\n * import {Cloudinary} from \"@cloudinary/base\";\n * import {format} from \"@cloudinary/base/actions/delivery\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.delivery(\n *  format('jpg'),\n * );\n *\n */\nfunction format(format) {\n    return new DeliveryFormat('f', format);\n}\n/**\n * @summary action\n * @description Deliver the image in the specified device pixel ratio.\n * @memberOf Actions.Delivery\n * @param {string} dpr The DPR (Device Pixel Ratio). Any positive float value.\n * @return {Actions.Delivery.DeliveryAction}\n * @example\n * import {Cloudinary} from \"@cloudinary/base\";\n * import {dpr} from \"@cloudinary/base/actions/delivery\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.delivery(\n *  dpr('2.0'),\n * );\n */\nfunction dpr(dpr) {\n    // toFloatAsString is used to ensure 1 turns into 1.0\n    return new DeliveryAction('dpr', toFloatAsString(dpr));\n}\n/**\n * @summary action\n * @description Controls the quality of the delivered image or video.\n *\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_optimization#how_to_optimize_image_quality | Image quality}\n *  {@link https://cloudinary.com/documentation/video_manipulation_and_delivery#quality_control | Video quality}\n * @memberOf Actions.Delivery\n * @param {string | number | Qualifiers.Quality} qualityType For a list of supported quality types see {@link Qualifiers.Quality| quality types} for\n * possible values.\n * @return {Actions.Delivery.DeliveryQualityAction}\n * @example\n * import {Cloudinary} from \"@cloudinary/base\";\n * import {quality} from \"@cloudinary/base/actions/delivery\";\n * import {quality} from \"@cloudinary/base/qualifiers/quantity\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.delivery(\n *  quality('auto'),\n * );\n */\nfunction quality(qualityType) {\n    return new DeliveryQualityAction(qualityType);\n}\n/**\n * @summary action\n * @description Controls the density to use when delivering an image or when converting a vector file such as a PDF or EPS\n * document to a web image delivery format.\n * @memberOf Actions.Delivery\n * @param {number | string} value The density in dpi.\n * @return {Actions.Delivery.DeliveryAction}\n * @example\n * import {Cloudinary} from \"@cloudinary/base\";\n * import {density} from \"@cloudinary/base/actions/delivery\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.delivery(\n *  density(150),\n * );\n */\nfunction density(value) {\n    return new DeliveryAction('dn', value);\n}\n/**\n * @summary action\n * @description Default images can be used in the case that a requested image does not exist.\n * @memberOf Actions.Delivery\n * @param {string} publicIdWithExtension Default image public ID\n * @return {Actions.Delivery.DeliveryAction}\n * @example\n * import {Cloudinary} from \"@cloudinary/base\";\n * import {defaultImage} from \"@cloudinary/base/actions/delivery\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.delivery(\n *  defaultImage('sample'),\n * );\n */\nfunction defaultImage(publicIdWithExtension) {\n    return new DeliveryAction('d', publicIdWithExtension);\n}\n/**\n * @summary action\n * @description Controls the color space used for the delivered image.\n * @memberOf Actions.Delivery\n * @param {string | Qualifiers.ColorSpace} mode The color space.\n * @return {Actions.Delivery.DeliveryAction}\n * @example\n * import {Cloudinary} from \"@cloudinary/base\";\n * import {colorSpace} from \"@cloudinary/base/actions/delivery\";\n * import {trueColor} from \"@cloudinary/base/qualifiers/colorSpace\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.delivery(\n *  colorSpace(trueColor()),\n * );\n */\nfunction colorSpace(mode) {\n    return new DeliveryAction('cs', mode);\n}\n/**\n * @summary action\n * @description Specifies the ICC profile to use for the color space.\n * The ICC file must be uploaded to your account as a raw, authenticated file.\n * @memberOf Actions.Delivery\n * @param {string} publicId The public ID (including the file extension) of the ICC profile that defines the\n * color space.\n * @return {Actions.Delivery.DeliveryColorSpaceFromICC}\n * @example\n * import {Cloudinary} from \"@cloudinary/base\";\n * import {colorSpaceFromICC} from \"@cloudinary/base/actions/delivery\";\n * import {trueColor} from \"@cloudinary/base/qualifiers/colorSpace\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.delivery(\n *  colorSpaceFromICC('sample.icc'),\n * );\n */\nfunction colorSpaceFromICC(publicId) {\n    return new DeliveryColorSpaceFromICC(publicId);\n}\nconst Delivery = {\n    format,\n    dpr,\n    density,\n    defaultImage,\n    colorSpace,\n    colorSpaceFromICC,\n    quality\n};\nexport { Delivery, format, dpr, quality, density, defaultImage, colorSpace, colorSpaceFromICC };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,cAAc,QAAQ,2BAA2B;AAC1D,SAASC,qBAAqB,QAAQ,4BAA4B;AAClE,SAASC,eAAe,QAAQ,mCAAmC;AACnE,SAASC,yBAAyB,QAAQ,sCAAsC;AAChF,SAASC,cAAc,QAAQ,2BAA2B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,MAAMA,CAACA,MAAM,EAAE;EACpB,OAAO,IAAIL,cAAc,CAAC,GAAG,EAAEK,MAAM,CAAC;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,GAAGA,CAACA,GAAG,EAAE;EACd;EACA,OAAO,IAAIF,cAAc,CAAC,KAAK,EAAEF,eAAe,CAACI,GAAG,CAAC,CAAC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,OAAOA,CAACC,WAAW,EAAE;EAC1B,OAAO,IAAIP,qBAAqB,CAACO,WAAW,CAAC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,OAAOA,CAACC,KAAK,EAAE;EACpB,OAAO,IAAIN,cAAc,CAAC,IAAI,EAAEM,KAAK,CAAC;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,YAAYA,CAACC,qBAAqB,EAAE;EACzC,OAAO,IAAIR,cAAc,CAAC,GAAG,EAAEQ,qBAAqB,CAAC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,UAAUA,CAACC,IAAI,EAAE;EACtB,OAAO,IAAIV,cAAc,CAAC,IAAI,EAAEU,IAAI,CAAC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,iBAAiBA,CAACC,QAAQ,EAAE;EACjC,OAAO,IAAIb,yBAAyB,CAACa,QAAQ,CAAC;AAClD;AACA,MAAMC,QAAQ,GAAG;EACbZ,MAAM;EACNC,GAAG;EACHG,OAAO;EACPE,YAAY;EACZE,UAAU;EACVE,iBAAiB;EACjBR;AACJ,CAAC;AACD,SAASU,QAAQ,EAAEZ,MAAM,EAAEC,GAAG,EAAEC,OAAO,EAAEE,OAAO,EAAEE,YAAY,EAAEE,UAAU,EAAEE,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}