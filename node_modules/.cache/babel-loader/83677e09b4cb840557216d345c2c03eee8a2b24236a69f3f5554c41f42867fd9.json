{"ast":null,"code":"import { Action } from \"../../internal/Action\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier\";\nimport { tiled } from \"../flag\";\nimport { noOverflow } from \"../flag\";\n/**\n * @description\n * Defines the position of a layer: overlay or underlay.</br>\n * Even though Position is technically an action qualifier, it implements exactly the same functionality as an action.</br>\n * This is true because Position is compounded of multiple qualifiers</br>\n *\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_transformations#image_and_text_overlays|Applying overlays to images} | {@link https://cloudinary.com/documentation/video_manipulation_and_delivery#adding_image_overlays|Applying overlays to videos}\n *\n * @extends {SDK.Actions}\n */\nclass PositionQualifier extends Action {\n  constructor() {\n    super();\n  }\n  gravity(gravityQualifier) {\n    this.addQualifier(gravityQualifier);\n    return this;\n  }\n  /**\n   * @description Tiles the overlay across your image.\n   * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_transformations#tiling_overlays | Tiling overlay}\n   */\n  tiled() {\n    this.addFlag(tiled());\n    return this;\n  }\n  /**\n   * TODO - This should accept a boolean value\n   * @description Prevents an image or text overlay from extending a delivered image canvas beyond the dimensions of the base image\n   * <b>Learn more:</b> {@link https://cloudinary.com/documentation/transformation_reference#fl_no_overflow | Overflow in overlays}\n   */\n  allowOverflow() {\n    let bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    if (bool === false) {\n      this.addFlag(noOverflow());\n    }\n    return this;\n  }\n  /**\n   * @description Set the X Offset\n   * @param {number | string} offsetX\n   * @return {this}\n   */\n  offsetX(offsetX) {\n    this.addQualifier(new Qualifier('x', offsetX));\n    return this;\n  }\n  /**\n   * @description Set the Y Offset\n   * @param {number | string} offsetY\n   * @return {this}\n   */\n  offsetY(offsetY) {\n    this.addQualifier(new Qualifier('y', offsetY));\n    return this;\n  }\n}\nexport { PositionQualifier };","map":{"version":3,"names":["Action","Qualifier","tiled","noOverflow","PositionQualifier","constructor","gravity","gravityQualifier","addQualifier","addFlag","allowOverflow","bool","arguments","length","undefined","offsetX","offsetY"],"sources":["D:/VSCode/Project_Market_Place/client/node_modules/@cloudinary/base/qualifiers/position/PositionQualifier.js"],"sourcesContent":["import { Action } from \"../../internal/Action\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier\";\nimport { tiled } from \"../flag\";\nimport { noOverflow } from \"../flag\";\n/**\n * @description\n * Defines the position of a layer: overlay or underlay.</br>\n * Even though Position is technically an action qualifier, it implements exactly the same functionality as an action.</br>\n * This is true because Position is compounded of multiple qualifiers</br>\n *\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_transformations#image_and_text_overlays|Applying overlays to images} | {@link https://cloudinary.com/documentation/video_manipulation_and_delivery#adding_image_overlays|Applying overlays to videos}\n *\n * @extends {SDK.Actions}\n */\nclass PositionQualifier extends Action {\n    constructor() {\n        super();\n    }\n    gravity(gravityQualifier) {\n        this.addQualifier(gravityQualifier);\n        return this;\n    }\n    /**\n     * @description Tiles the overlay across your image.\n     * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_transformations#tiling_overlays | Tiling overlay}\n     */\n    tiled() {\n        this.addFlag(tiled());\n        return this;\n    }\n    /**\n     * TODO - This should accept a boolean value\n     * @description Prevents an image or text overlay from extending a delivered image canvas beyond the dimensions of the base image\n     * <b>Learn more:</b> {@link https://cloudinary.com/documentation/transformation_reference#fl_no_overflow | Overflow in overlays}\n     */\n    allowOverflow(bool = true) {\n        if (bool === false) {\n            this.addFlag(noOverflow());\n        }\n        return this;\n    }\n    /**\n     * @description Set the X Offset\n     * @param {number | string} offsetX\n     * @return {this}\n     */\n    offsetX(offsetX) {\n        this.addQualifier(new Qualifier('x', offsetX));\n        return this;\n    }\n    /**\n     * @description Set the Y Offset\n     * @param {number | string} offsetY\n     * @return {this}\n     */\n    offsetY(offsetY) {\n        this.addQualifier(new Qualifier('y', offsetY));\n        return this;\n    }\n}\nexport { PositionQualifier };\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,SAAS,QAAQ,oCAAoC;AAC9D,SAASC,KAAK,QAAQ,SAAS;AAC/B,SAASC,UAAU,QAAQ,SAAS;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,SAASJ,MAAM,CAAC;EACnCK,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,CAAC;EACX;EACAC,OAAOA,CAACC,gBAAgB,EAAE;IACtB,IAAI,CAACC,YAAY,CAACD,gBAAgB,CAAC;IACnC,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;EACIL,KAAKA,CAAA,EAAG;IACJ,IAAI,CAACO,OAAO,CAACP,KAAK,CAAC,CAAC,CAAC;IACrB,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;EACIQ,aAAaA,CAAA,EAAc;IAAA,IAAbC,IAAI,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;IACrB,IAAID,IAAI,KAAK,KAAK,EAAE;MAChB,IAAI,CAACF,OAAO,CAACN,UAAU,CAAC,CAAC,CAAC;IAC9B;IACA,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;EACIY,OAAOA,CAACA,OAAO,EAAE;IACb,IAAI,CAACP,YAAY,CAAC,IAAIP,SAAS,CAAC,GAAG,EAAEc,OAAO,CAAC,CAAC;IAC9C,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;EACIC,OAAOA,CAACA,OAAO,EAAE;IACb,IAAI,CAACR,YAAY,CAAC,IAAIP,SAAS,CAAC,GAAG,EAAEe,OAAO,CAAC,CAAC;IAC9C,OAAO,IAAI;EACf;AACJ;AACA,SAASZ,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}