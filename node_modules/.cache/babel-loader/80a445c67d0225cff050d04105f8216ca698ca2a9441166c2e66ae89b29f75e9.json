{"ast":null,"code":"import { BaseSource } from \"../BaseSource\";\nimport { base64Encode } from \"../../../internal/utils/base64Encode\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.BaseSource}\n * @description Defines how to manipulate a Fetch layer\n * <div class=\"panel panel-warning\">\n *   <div class=\"panel-heading\">Notice</div>\n *   <div class=\"panel-body\">\n *     This class is used as a Qualifier for the asset.overlay() and asset.underlay() methods.</br>\n *     You can find regular images and videos transformations below:\n *   </div>\n  *   <ul>\n *     <li>{@link SDK.ImageTransformation| Image Transformations}</li>\n *     <li>{@link SDK.VideoTransformation| Video Transformations}</li>\n *   </ul>\n * </div>\n *\n * {@link https://cloudinary.com/documentation/fetch_remote_images|Learn more about fetching from a remote URL}\n */\nclass FetchSource extends BaseSource {\n  constructor(remoteURL) {\n    super();\n    this._remoteURL = remoteURL;\n  }\n  /**\n   * @description\n   * Returns the opening string of the layer,\n   * This method is used internally within {@link SDK.LayerAction|LayerAction}\n   * @returns {string}\n   */\n  getOpenSourceString(layerType) {\n    if (this._format) {\n      return `${layerType}_fetch:${base64Encode(this._remoteURL)}.${this._format.toString()}`;\n    } else {\n      return `${layerType}_fetch:${base64Encode(this._remoteURL)}`;\n    }\n  }\n  /**\n   * @description\n   * Apply a format for the image source of the layer\n   * @param {FormatQualifier} format A to apply to the layered image, see more {@link Qualifiers.Format|here}\n   * @returns {this}\n   */\n  format(format) {\n    this._format = format;\n    return this;\n  }\n}\nexport { FetchSource };","map":{"version":3,"names":["BaseSource","base64Encode","FetchSource","constructor","remoteURL","_remoteURL","getOpenSourceString","layerType","_format","toString","format"],"sources":["D:/VSCode/Project_Market_Place/client/node_modules/@cloudinary/base/qualifiers/source/sourceTypes/FetchSource.js"],"sourcesContent":["import { BaseSource } from \"../BaseSource\";\nimport { base64Encode } from \"../../../internal/utils/base64Encode\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.BaseSource}\n * @description Defines how to manipulate a Fetch layer\n * <div class=\"panel panel-warning\">\n *   <div class=\"panel-heading\">Notice</div>\n *   <div class=\"panel-body\">\n *     This class is used as a Qualifier for the asset.overlay() and asset.underlay() methods.</br>\n *     You can find regular images and videos transformations below:\n *   </div>\n  *   <ul>\n *     <li>{@link SDK.ImageTransformation| Image Transformations}</li>\n *     <li>{@link SDK.VideoTransformation| Video Transformations}</li>\n *   </ul>\n * </div>\n *\n * {@link https://cloudinary.com/documentation/fetch_remote_images|Learn more about fetching from a remote URL}\n */\nclass FetchSource extends BaseSource {\n    constructor(remoteURL) {\n        super();\n        this._remoteURL = remoteURL;\n    }\n    /**\n     * @description\n     * Returns the opening string of the layer,\n     * This method is used internally within {@link SDK.LayerAction|LayerAction}\n     * @returns {string}\n     */\n    getOpenSourceString(layerType) {\n        if (this._format) {\n            return `${layerType}_fetch:${base64Encode(this._remoteURL)}.${this._format.toString()}`;\n        }\n        else {\n            return `${layerType}_fetch:${base64Encode(this._remoteURL)}`;\n        }\n    }\n    /**\n     * @description\n     * Apply a format for the image source of the layer\n     * @param {FormatQualifier} format A to apply to the layered image, see more {@link Qualifiers.Format|here}\n     * @returns {this}\n     */\n    format(format) {\n        this._format = format;\n        return this;\n    }\n}\nexport { FetchSource };\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,YAAY,QAAQ,sCAAsC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,SAASF,UAAU,CAAC;EACjCG,WAAWA,CAACC,SAAS,EAAE;IACnB,KAAK,CAAC,CAAC;IACP,IAAI,CAACC,UAAU,GAAGD,SAAS;EAC/B;EACA;AACJ;AACA;AACA;AACA;AACA;EACIE,mBAAmBA,CAACC,SAAS,EAAE;IAC3B,IAAI,IAAI,CAACC,OAAO,EAAE;MACd,OAAQ,GAAED,SAAU,UAASN,YAAY,CAAC,IAAI,CAACI,UAAU,CAAE,IAAG,IAAI,CAACG,OAAO,CAACC,QAAQ,CAAC,CAAE,EAAC;IAC3F,CAAC,MACI;MACD,OAAQ,GAAEF,SAAU,UAASN,YAAY,CAAC,IAAI,CAACI,UAAU,CAAE,EAAC;IAChE;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;EACIK,MAAMA,CAACA,MAAM,EAAE;IACX,IAAI,CAACF,OAAO,GAAGE,MAAM;IACrB,OAAO,IAAI;EACf;AACJ;AACA,SAASR,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}