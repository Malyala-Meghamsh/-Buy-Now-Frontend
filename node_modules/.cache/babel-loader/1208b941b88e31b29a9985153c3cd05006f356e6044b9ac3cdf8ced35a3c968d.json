{"ast":null,"code":"import { Action } from \"../../internal/Action\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier\";\n/**\n * @description Defines how to improve an image by automatically adjusting image colors, contrast and brightness.</br>\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_transformations#image_improvement_effects | Image improvement effects}\n * @memberOf Actions.Adjust\n */\nclass ImproveAction extends Action {\n  constructor() {\n    super();\n  }\n  /**\n   *\n   * @description The improve mode.\n   * @param {Qualifiers.ImproveMode | string} value\n   */\n  mode(value) {\n    this.modeValue = value;\n    return this;\n  }\n  /**\n   * @description How much to blend the improved result with the original image, where 0 means only use the original and 100 means only use the improved result. (Range: 0 to 100, Server default: 100)\n   * @param {number} value\n   */\n  blend(value) {\n    this.blendValue = value;\n    return this;\n  }\n  prepareQualifiers() {\n    const qualifierValue = new QualifierValue(['improve', this.modeValue, this.blendValue]).setDelimiter(':');\n    this.addQualifier(new Qualifier('e', qualifierValue));\n    return this;\n  }\n}\nexport { ImproveAction };","map":{"version":3,"names":["Action","QualifierValue","Qualifier","ImproveAction","constructor","mode","value","modeValue","blend","blendValue","prepareQualifiers","qualifierValue","setDelimiter","addQualifier"],"sources":["D:/VSCode/Project_Market_Place/client/node_modules/@cloudinary/base/actions/adjust/ImproveAction.js"],"sourcesContent":["import { Action } from \"../../internal/Action\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier\";\n/**\n * @description Defines how to improve an image by automatically adjusting image colors, contrast and brightness.</br>\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_transformations#image_improvement_effects | Image improvement effects}\n * @memberOf Actions.Adjust\n */\nclass ImproveAction extends Action {\n    constructor() {\n        super();\n    }\n    /**\n     *\n     * @description The improve mode.\n     * @param {Qualifiers.ImproveMode | string} value\n     */\n    mode(value) {\n        this.modeValue = value;\n        return this;\n    }\n    /**\n     * @description How much to blend the improved result with the original image, where 0 means only use the original and 100 means only use the improved result. (Range: 0 to 100, Server default: 100)\n     * @param {number} value\n     */\n    blend(value) {\n        this.blendValue = value;\n        return this;\n    }\n    prepareQualifiers() {\n        const qualifierValue = new QualifierValue(['improve', this.modeValue, this.blendValue]).setDelimiter(':');\n        this.addQualifier(new Qualifier('e', qualifierValue));\n        return this;\n    }\n}\nexport { ImproveAction };\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,cAAc,QAAQ,yCAAyC;AACxE,SAASC,SAAS,QAAQ,oCAAoC;AAC9D;AACA;AACA;AACA;AACA;AACA,MAAMC,aAAa,SAASH,MAAM,CAAC;EAC/BI,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,CAAC;EACX;EACA;AACJ;AACA;AACA;AACA;EACIC,IAAIA,CAACC,KAAK,EAAE;IACR,IAAI,CAACC,SAAS,GAAGD,KAAK;IACtB,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;EACIE,KAAKA,CAACF,KAAK,EAAE;IACT,IAAI,CAACG,UAAU,GAAGH,KAAK;IACvB,OAAO,IAAI;EACf;EACAI,iBAAiBA,CAAA,EAAG;IAChB,MAAMC,cAAc,GAAG,IAAIV,cAAc,CAAC,CAAC,SAAS,EAAE,IAAI,CAACM,SAAS,EAAE,IAAI,CAACE,UAAU,CAAC,CAAC,CAACG,YAAY,CAAC,GAAG,CAAC;IACzG,IAAI,CAACC,YAAY,CAAC,IAAIX,SAAS,CAAC,GAAG,EAAES,cAAc,CAAC,CAAC;IACrD,OAAO,IAAI;EACf;AACJ;AACA,SAASR,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}