{"ast":null,"code":"import { BlurAction } from \"./effect/blur/blur\";\nimport { AccelerationEffectAction } from \"./effect/leveled/accelerate\";\nimport { LoopEffectAction } from \"./effect/leveled/loop\";\nimport { CartoonifyEffect } from \"./effect/cartoonify\";\nimport { EffectOutline } from \"./effect/outline\";\nimport { SimpleEffectAction } from \"./effect/EffectActions/SimpleEffectAction\";\nimport { MakeTransparentEffectAction } from \"./effect/leveled/makeTransparent\";\nimport { VectorizeEffectAction } from \"./effect/vectorize\";\nimport { SimulateColorBlindEffectAction } from \"./effect/simulateColorBlind\";\nimport { EffectActionWithLevel } from \"./effect/EffectActions/EffectActionWithLevel\";\nimport { AssistColorBlindEffectAction } from \"./effect/assistColorBlind\";\nimport { GradientFadeEffectAction } from \"./effect/gradientFade\";\nimport { FadeoutEffectAction } from \"./effect/leveled/fadeOut\";\nimport { ColorizeEffectAction } from \"./effect/colorize\";\nimport { ShadowEffectAction } from \"./effect/shadow\";\nimport { StyleTransfer } from \"./effect/styleTransfer\";\nimport { DitherEffectAction } from \"./effect/dither\";\nimport { DeshakeEffectAction } from \"./effect/leveled/deshake\";\nimport { Pixelate } from \"./effect/pixelate/pixelate\";\nimport { EffectActionWithStrength } from \"./effect/EffectActions/EffectActionWithStrength\";\nimport { BlackwhiteEffectAction } from \"./effect/leveled/blackwhite\";\nimport { FadeInEffectAction } from \"./effect/leveled/fadeIn\";\nimport { RemoveBackgroundAction } from \"./effect/removeBackgroundAction\";\nimport { ThemeEffect } from \"./effect/theme\";\n/**\n * @summary action\n * @description Applies a blurring filter to the asset.\n * @memberOf Actions.Effect\n * @param {number} blurLevel The strength of the blur. (Range: 1 to 2000, Server default: 100)\n * @return {Actions.Effect.BlurAction}\n */\nfunction blur(blurLevel) {\n  return new BlurAction(blurLevel);\n}\n/**\n * @summary action\n * @description Converts the image to gray-scale (multiple shades of gray).\n * @memberOf Actions.Effect\n * @return {Actions.Effect.SimpleEffectAction}\n */\nfunction grayscale() {\n  return new SimpleEffectAction('grayscale');\n}\n/**\n * @summary action\n * @description Changes the color scheme of the image to sepia.\n * @memberOf Actions.Effect\n * @param {number} level The level of sepia to apply. (Range: 1 to 100, Server default: 80)\n * @return {Actions.Effect.EffectActionWithLevel}\n */\nfunction sepia(level) {\n  return new EffectActionWithLevel('sepia', level);\n}\n/**\n * @summary action\n * @description Applies a shadow filter to the asset.\n * @memberOf Actions.Effect\n * @param shadowLevel\n * @return {Actions.Effect.ShadowEffectAction}\n */\nfunction shadow(shadowLevel) {\n  return new ShadowEffectAction('shadow', shadowLevel);\n}\n/**\n * @summary action\n * @description Applies a colorizing filter to the asset.\n * @memberOf Actions.Effect\n * @param {number} colorizeLevel The strength of the color. (Range: 0 to 100, Server default: 100)\n * @return {Actions.Effect.ColorizeEffectAction}\n */\nfunction colorize(colorizeLevel) {\n  return new ColorizeEffectAction('colorize', colorizeLevel);\n}\n/**\n * @summary action\n * @description Applies an oilPaint filter to the asset.\n * @memberOf Actions.Effect\n * @param {number} oilPaintLevel The strength of the effect. (Range: 0 to 100, Server default: 30)\n * @return {Actions.Effect.EffectActionWithStrength}\n */\nfunction oilPaint(oilPaintLevel) {\n  return new EffectActionWithStrength('oil_paint', oilPaintLevel);\n}\n/**\n * @summary action\n * @description Applies an artistic filter to the asset.\n * @memberOf Actions.Effect\n * @param artisticFilterType\n * @return {Actions.Effect.SimpleEffectAction}\n */\nfunction artisticFilter(artisticFilterType) {\n  return new SimpleEffectAction('art', artisticFilterType);\n}\n/**\n * @summary action\n * @description Applies a cartoonify effect to the asset.\n * @memberOf Actions.Effect\n * @param cartoonifyLevel The thickness of the lines. (Range: 0 to 100, Server default: 50)\n * @return {Actions.Effect.CartoonifyEffect}\n */\nfunction cartoonify(cartoonifyLevel) {\n  return new CartoonifyEffect('cartoonify', cartoonifyLevel);\n}\n/**\n * @summary action\n * @description Adds an outline to a transparent image. For examples, see the Image Transformations guide.\n * @memberOf Actions.Effect\n * @return {Actions.Effect.EffectOutline}\n */\nfunction outline() {\n  return new EffectOutline();\n}\n/**\n * @summary action\n * @description Applies a complex deep learning neural network algorithm that extracts artistic styles from a source image and applies them to the content of a target photograph.<br/>\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/neural_artwork_style_transfer_addon | Neural Artwork Style Transfer}\n * @memberOf Actions.Effect\n * @param {ImageSource} imageSource `import {image} from '@cloudinary/base/qualifiers/sources`\n * @return {Actions.Effect.StyleTransfer}\n */\nfunction styleTransfer(imageSource) {\n  return new StyleTransfer(imageSource);\n}\n/**\n * @summary action\n * @description\n * Causes a video clip to play forwards and then backwards.\n * Use in conjunction with trimming parameters ('duration', 'start_offset', or 'end_offset') and the 'loop' effect to deliver a classic (short, repeating) boomerang clip.<br/>\n * For details and examples, see 'Create a boomerang video clip' in the Video Transformations guide.\n * @memberOf Actions.Effect\n * @return {Actions.Effect.SimpleEffectAction}\n */\nfunction boomerang() {\n  return new SimpleEffectAction('boomerang');\n}\n/**\n * @summary action\n * @description\n * Removes red eyes with the Advanced Facial Attribute Detection add-on.\n * For details, see the Advanced Facial Attribute Detection add-on documentation.\n * @memberOf Actions.Effect\n * @return {Actions.Effect.SimpleEffectAction}\n */\nfunction advancedRedEye() {\n  return new SimpleEffectAction('adv_redeye');\n}\n/**\n * @summary action\n * @description Converts the image to black and white.\n * @memberOf Actions.Effect\n * @param {number | string} level The balance between black (100) and white (0). (Range: 0 to 100, Server default: 50)\n * @return {Actions.Effect.BlackwhiteEffectAction}\n */\nfunction blackwhite(level) {\n  return new BlackwhiteEffectAction('blackwhite', level);\n}\n/**\n * @summary action\n * @description Negates the image colors (negative).\n * @memberOf Actions.Effect\n * @return {Actions.Effect.SimpleEffectAction}\n */\nfunction negate() {\n  return new SimpleEffectAction('negate');\n}\n/**\n * @summary action\n * @description Removes red eyes in the image.\n * @memberOf Actions.Effect\n * @return {Actions.Effect.SimpleEffectAction}\n */\nfunction redEye() {\n  return new SimpleEffectAction('redeye');\n}\n/**\n * @summary action\n * @description Plays the video or audio file in reverse.\n * @memberOf Actions.Effect\n * @return {Actions.Effect.SimpleEffectAction}\n */\nfunction reverse() {\n  return new SimpleEffectAction('reverse');\n}\n/**\n * @summary action\n * @description Changes the speed of the video playback.\n * @memberOf Actions.Effect\n * @param {number} speedIncreasePercent The percentage change of speed. Positive numbers speed up the playback, negative numbers slow down the playback (Range: -50 to 100, Server default: 0)\n * @return {Actions.Effect.AccelerationEffectAction}\n */\nfunction accelerate(speedIncreasePercent) {\n  return new AccelerationEffectAction('accelerate', speedIncreasePercent);\n}\n/**\n * @summary action\n * @description\n * Fade in at the beginning of the video.\n * For details and examples, see 'Fade in and out' in the Video Transformations guide.\n * @memberOf Actions.Effect\n * @param {number} fadeLength The time in ms for the fade to occur. (Server default: 2000)\n * @return {Actions.Effect.FadeInEffectAction}\n */\nfunction fadeIn(fadeLength) {\n  return new FadeInEffectAction('fade', fadeLength);\n}\n/**\n * @summary action\n * @description\n * Fade out at the end of the video.\n * For details and examples, see 'Fade in and out' in the Video Transformations guide.\n * @memberOf Actions.Effect\n * @param {number} fadeLength The time in ms for the fade to occur. (Server default: 2000)\n * @return {Actions.Effect.FadeoutEffectAction}\n */\nfunction fadeOut(fadeLength) {\n  return new FadeoutEffectAction('fade', -fadeLength);\n}\n/**\n * @summary action\n * @description\n * Delivers a video or animated GIF that contains additional loops of the video/GIF.\n * The total number of iterations is the number of additional loops plus one. <br/>\n * For animated GIFs only, you can also specify the loop effect without a numeric value to instruct it to loop the GIF infinitely.\n * @memberOf Actions.Effect\n * @param {number} additionalLoops The additional number of times to play the video or animated GIF.\n * @return {Actions.Effect.LoopEffectAction}\n */\nfunction loop(additionalLoops) {\n  return new LoopEffectAction('loop', additionalLoops);\n}\n/**\n * @summary action\n * @description\n * Makes the background of the image transparent (or solid white for formats that do not support transparency).\n * The background is determined as all pixels that resemble the pixels on the edges of the image.\n *\n * @memberOf Actions.Effect\n * @param {number} tolerance The tolerance used to accommodate variance in the background color. (Range: 0 to 100, Server default: 10)\n * @return {Actions.Effect.MakeTransparentEffectAction}\n */\nfunction makeTransparent(tolerance) {\n  return new MakeTransparentEffectAction('make_transparent', tolerance);\n}\n/**\n * @summary action\n * @description Adds visual noise to the video, visible as a random flicker of \"dots\" or \"snow\".\n * @memberOf Actions.Effect\n * @param {number} percentage The percent of noise to apply. (Range: 0 to 100 Server default: 0)\n * @return {Actions.Effect.EffectActionWithLevel}\n */\nfunction noise(percentage) {\n  return new EffectActionWithLevel('noise', percentage);\n}\n/**\n * @summary action\n * @description Applies a vignette effect.\n * @memberOf Actions.Effect\n * @param {number} strength The strength of the vignette. (Range: 0 to 100, Server default: 20)\n * @return {Actions.Effect.EffectActionWithStrength}\n */\nfunction vignette(strength) {\n  return new EffectActionWithStrength('vignette', strength);\n}\n/**\n * @summary action\n * @description\n * Applies an ordered dither filter to the image.\n * Use the constants defined in {@link Qualifiers.Dither|@cloudinary/base/qualifiers/dither} for ditherType.\n * @memberOf Actions.Effect\n * @param {Qualifiers.Dither} ditherType - The dither type applied to the image\n * @return {Actions.Effect.DitherEffectAction}\n */\nfunction dither(ditherType) {\n  return new DitherEffectAction('ordered_dither', ditherType);\n}\n/**\n * @summary action\n * @description\n * Vectorizes the image.\n * Notes:\n * To deliver the image as a vector image, make sure to change the format (or URL extension) to a vector format, such as SVG.</br>\n * However, you can also deliver in a raster format if you just want to get the 'vectorized' graphic effect.</br>\n * Large images are scaled down to 1000 pixels in the largest dimension before vectorization.\n *\n * @memberOf Actions.Effect\n * @return {Actions.Effect.VectorizeEffectAction}\n */\nfunction vectorize() {\n  return new VectorizeEffectAction();\n}\n/**\n * @summary action\n * @description\n * Applies a gradient fade effect from one edge of the image.\n * Use .x() or .y() to indicate from which edge to fade and how much of the image should be faded.\n * Values of x and y can be specified as a percentage (Range: 0.0 to 1.0), or in pixels (integer values). <br/>\n * Positive values fade from the top (y) or left (x). Negative values fade from the bottom (y) or right (x). <br/>\n * By default, the gradient is applied to the top 50% of the image (y = 0.5).<br/>\n * Only one direction can be specified but the fade can be applied symmetrically using the mode parameter. </br>\n * To apply different amounts of fade to multiple edges, use chained fade effects.\n *\n * @memberOf Actions.Effect\n * @return {Actions.Effect.GradientFadeEffectAction}\n */\nfunction gradientFade() {\n  return new GradientFadeEffectAction();\n}\n/**\n * @summary action\n * @description\n * Applies stripes to the image to help people with common color-blind conditions to differentiate between colors that are similar for them.</br>\n * You can replace colors using the xRay() method of the \\Cloudinary\\Transformation\\AssistColorBlind class.\n * @memberOf Actions.Effect\n * @return {Actions.Effect.AssistColorBlindEffectAction}\n */\nfunction assistColorBlind() {\n  return new AssistColorBlindEffectAction();\n}\n/**\n * @summary action\n * @description\n * Simulates the way an image would appear to someone with the specified color blind condition. </br>\n * For a list of supported color blind conditions see {@link Qualifiers.SimulateColorBlindValues| types of color blindness} for possible values\n * @memberOf Actions.Effect\n * @return {Actions.Effect.SimulateColorBlindEffectAction}\n */\nfunction simulateColorBlind() {\n  return new SimulateColorBlindEffectAction();\n}\n/**\n * @summary action\n * @description Removes small motion shifts from the video. with a maximum extent of movement in the horizontal and vertical direction of 32 pixels\n * @memberOf Actions.Effect\n * @return {Actions.Effect.DeshakeEffectAction}\n */\nfunction deshake(pixels) {\n  return new DeshakeEffectAction('deshake', pixels);\n}\n/**\n * @summary action\n * @description Supports the concatenation of videos with a custom transition by including a transition video as an\n * additional layer and specifying the transition effect\n * @memberOf Actions.Effect\n * @return {Actions.Effect.SimpleEffectAction}\n */\nfunction transition() {\n  return new SimpleEffectAction('transition');\n}\n/**\n * @summary action\n * @description Applies a pixelatering filter to the asset.\n * @memberOf Actions.Effect\n * @param {number} squareSize The squareSize in the pixelation. (Range: 1 to 2000, Server default: 100)\n * @return {Actions.Effect.Pixelate}\n */\nfunction pixelate(squareSize) {\n  return new Pixelate(squareSize);\n}\n/**\n * @summary action\n * @description Makes the background of an image transparent (or solid white for JPGs).</br>\n *              Use when the background is a uniform color.\n *              {@link https://cloudinary.com/documentation/transformation_reference#e_bgremoval | Background Removal}\n *\n * @memberOf Actions.Effect\n * @return {Actions.Effect.RemoveBackgroundAction}\n */\nfunction removeBackground() {\n  return new RemoveBackgroundAction();\n}\n/**\n *\n * @description Changes the main background color to the one specified, as if a 'theme change' was applied (e.g. dark mode vs light mode).\n * @param {SystemColors} color\n * @return {Actions.Effect.ThemeEffect}\n */\nfunction theme(color) {\n  return new ThemeEffect(color);\n}\n/**\n * @description Defines effects that you can apply to transform your assets.\n * @memberOf Actions\n * @namespace Effect\n * @example\n * <caption>An <b>extreme</b> example of using many effects on the same asset</caption>\n * import {Cloudinary} from \"@cloudinary/base\";\n * // Import everything, or just the action you need for tree-shaking purposes\n * import {Effect, sepia} from \"@cloudinary/base/actions/effect\";\n * import {ArtisticFilter, alDente} from \"../../../src/qualifiers/artisticFilter\";\n * import {ShakeStrength, pixels16} from \"../../../src/qualifiers/shakeStrength\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n *\n * image.effect(Effect.advancedRedEye())\n * .effect(Effect.accelerate())\n * .effect(Effect.accelerate(100))\n * .effect(Effect.accelerate().rate(5))\n * .effect(Effect.boomerang())\n * .effect(Effect.blackwhite())\n * .effect(Effect.blackwhite(10))\n * .effect(Effect.blackwhite().threshold(20))\n * .effect(Effect.fadeIn(100))\n * .effect(Effect.fadeIn().duration(5))\n * .effect(Effect.fadeOut(100))\n * .effect(Effect.fadeOut().duration(5))\n * .effect(Effect.grayscale())\n * .effect(Effect.loop())\n * .effect(Effect.loop(100))\n * .effect(Effect.loop().additionalIterations(5))\n * .effect(Effect.makeTransparent())\n * .effect(Effect.makeTransparent(100))\n * .effect(Effect.makeTransparent().tolerance(5))\n * .effect(Effect.makeTransparent().tolerance(5).colorToReplace('red'))\n * .effect(Effect.noise())\n * .effect(Effect.noise(100))\n * .effect(Effect.noise().level(5))\n * .effect(Effect.negate())\n * .effect(Effect.reverse())\n * .effect(Effect.redEye())\n * .effect(Effect.sepia())\n * .effect(Effect.sepia(100))\n * .effect(Effect.sepia().level(5))\n * .effect(Effect.vignette())\n * .effect(Effect.vignette(100))\n * .effect(Effect.vignette().strength(5))\n * .effect(Effect.deshake())\n * .effect(Effect.deshake(10))\n * .effect(Effect.artisticFilter(alDente())\n * .effect(Effect.deshake().shakeStrength(pixels16()))\n */\nconst Effect = {\n  pixelate: pixelate,\n  deshake: deshake,\n  boomerang: boomerang,\n  advancedRedEye: advancedRedEye,\n  blackwhite,\n  negate: negate,\n  redEye: redEye,\n  reverse: reverse,\n  accelerate: accelerate,\n  fadeIn: fadeIn,\n  fadeOut: fadeOut,\n  loop: loop,\n  makeTransparent: makeTransparent,\n  noise: noise,\n  vignette: vignette,\n  blur: blur,\n  grayscale: grayscale,\n  sepia: sepia,\n  shadow: shadow,\n  colorize: colorize,\n  oilPaint: oilPaint,\n  artisticFilter: artisticFilter,\n  cartoonify: cartoonify,\n  outline: outline,\n  styleTransfer: styleTransfer,\n  gradientFade: gradientFade,\n  vectorize: vectorize,\n  assistColorBlind: assistColorBlind,\n  simulateColorBlind: simulateColorBlind,\n  transition: transition,\n  dither: dither,\n  removeBackground,\n  theme\n};\nexport { Effect, pixelate, deshake, boomerang, advancedRedEye, blackwhite, negate, redEye, reverse, accelerate, fadeIn, fadeOut, loop, makeTransparent, noise, vignette, blur, grayscale, sepia, shadow, colorize, oilPaint, artisticFilter, cartoonify, outline, styleTransfer, gradientFade, vectorize, assistColorBlind, simulateColorBlind, transition, dither, removeBackground, theme };","map":{"version":3,"names":["BlurAction","AccelerationEffectAction","LoopEffectAction","CartoonifyEffect","EffectOutline","SimpleEffectAction","MakeTransparentEffectAction","VectorizeEffectAction","SimulateColorBlindEffectAction","EffectActionWithLevel","AssistColorBlindEffectAction","GradientFadeEffectAction","FadeoutEffectAction","ColorizeEffectAction","ShadowEffectAction","StyleTransfer","DitherEffectAction","DeshakeEffectAction","Pixelate","EffectActionWithStrength","BlackwhiteEffectAction","FadeInEffectAction","RemoveBackgroundAction","ThemeEffect","blur","blurLevel","grayscale","sepia","level","shadow","shadowLevel","colorize","colorizeLevel","oilPaint","oilPaintLevel","artisticFilter","artisticFilterType","cartoonify","cartoonifyLevel","outline","styleTransfer","imageSource","boomerang","advancedRedEye","blackwhite","negate","redEye","reverse","accelerate","speedIncreasePercent","fadeIn","fadeLength","fadeOut","loop","additionalLoops","makeTransparent","tolerance","noise","percentage","vignette","strength","dither","ditherType","vectorize","gradientFade","assistColorBlind","simulateColorBlind","deshake","pixels","transition","pixelate","squareSize","removeBackground","theme","color","Effect"],"sources":["D:/VSCode/Project_Market_Place/client/node_modules/@cloudinary/base/actions/effect.js"],"sourcesContent":["import { BlurAction } from \"./effect/blur/blur\";\nimport { AccelerationEffectAction } from \"./effect/leveled/accelerate\";\nimport { LoopEffectAction } from \"./effect/leveled/loop\";\nimport { CartoonifyEffect } from \"./effect/cartoonify\";\nimport { EffectOutline } from \"./effect/outline\";\nimport { SimpleEffectAction } from \"./effect/EffectActions/SimpleEffectAction\";\nimport { MakeTransparentEffectAction } from \"./effect/leveled/makeTransparent\";\nimport { VectorizeEffectAction } from \"./effect/vectorize\";\nimport { SimulateColorBlindEffectAction } from \"./effect/simulateColorBlind\";\nimport { EffectActionWithLevel } from \"./effect/EffectActions/EffectActionWithLevel\";\nimport { AssistColorBlindEffectAction } from \"./effect/assistColorBlind\";\nimport { GradientFadeEffectAction } from \"./effect/gradientFade\";\nimport { FadeoutEffectAction } from \"./effect/leveled/fadeOut\";\nimport { ColorizeEffectAction } from \"./effect/colorize\";\nimport { ShadowEffectAction } from \"./effect/shadow\";\nimport { StyleTransfer } from \"./effect/styleTransfer\";\nimport { DitherEffectAction } from \"./effect/dither\";\nimport { DeshakeEffectAction } from \"./effect/leveled/deshake\";\nimport { Pixelate } from \"./effect/pixelate/pixelate\";\nimport { EffectActionWithStrength } from \"./effect/EffectActions/EffectActionWithStrength\";\nimport { BlackwhiteEffectAction } from \"./effect/leveled/blackwhite\";\nimport { FadeInEffectAction } from \"./effect/leveled/fadeIn\";\nimport { RemoveBackgroundAction } from \"./effect/removeBackgroundAction\";\nimport { ThemeEffect } from \"./effect/theme\";\n/**\n * @summary action\n * @description Applies a blurring filter to the asset.\n * @memberOf Actions.Effect\n * @param {number} blurLevel The strength of the blur. (Range: 1 to 2000, Server default: 100)\n * @return {Actions.Effect.BlurAction}\n */\nfunction blur(blurLevel) {\n    return new BlurAction(blurLevel);\n}\n/**\n * @summary action\n * @description Converts the image to gray-scale (multiple shades of gray).\n * @memberOf Actions.Effect\n * @return {Actions.Effect.SimpleEffectAction}\n */\nfunction grayscale() {\n    return new SimpleEffectAction('grayscale');\n}\n/**\n * @summary action\n * @description Changes the color scheme of the image to sepia.\n * @memberOf Actions.Effect\n * @param {number} level The level of sepia to apply. (Range: 1 to 100, Server default: 80)\n * @return {Actions.Effect.EffectActionWithLevel}\n */\nfunction sepia(level) {\n    return new EffectActionWithLevel('sepia', level);\n}\n/**\n * @summary action\n * @description Applies a shadow filter to the asset.\n * @memberOf Actions.Effect\n * @param shadowLevel\n * @return {Actions.Effect.ShadowEffectAction}\n */\nfunction shadow(shadowLevel) {\n    return new ShadowEffectAction('shadow', shadowLevel);\n}\n/**\n * @summary action\n * @description Applies a colorizing filter to the asset.\n * @memberOf Actions.Effect\n * @param {number} colorizeLevel The strength of the color. (Range: 0 to 100, Server default: 100)\n * @return {Actions.Effect.ColorizeEffectAction}\n */\nfunction colorize(colorizeLevel) {\n    return new ColorizeEffectAction('colorize', colorizeLevel);\n}\n/**\n * @summary action\n * @description Applies an oilPaint filter to the asset.\n * @memberOf Actions.Effect\n * @param {number} oilPaintLevel The strength of the effect. (Range: 0 to 100, Server default: 30)\n * @return {Actions.Effect.EffectActionWithStrength}\n */\nfunction oilPaint(oilPaintLevel) {\n    return new EffectActionWithStrength('oil_paint', oilPaintLevel);\n}\n/**\n * @summary action\n * @description Applies an artistic filter to the asset.\n * @memberOf Actions.Effect\n * @param artisticFilterType\n * @return {Actions.Effect.SimpleEffectAction}\n */\nfunction artisticFilter(artisticFilterType) {\n    return new SimpleEffectAction('art', artisticFilterType);\n}\n/**\n * @summary action\n * @description Applies a cartoonify effect to the asset.\n * @memberOf Actions.Effect\n * @param cartoonifyLevel The thickness of the lines. (Range: 0 to 100, Server default: 50)\n * @return {Actions.Effect.CartoonifyEffect}\n */\nfunction cartoonify(cartoonifyLevel) {\n    return new CartoonifyEffect('cartoonify', cartoonifyLevel);\n}\n/**\n * @summary action\n * @description Adds an outline to a transparent image. For examples, see the Image Transformations guide.\n * @memberOf Actions.Effect\n * @return {Actions.Effect.EffectOutline}\n */\nfunction outline() {\n    return new EffectOutline();\n}\n/**\n * @summary action\n * @description Applies a complex deep learning neural network algorithm that extracts artistic styles from a source image and applies them to the content of a target photograph.<br/>\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/neural_artwork_style_transfer_addon | Neural Artwork Style Transfer}\n * @memberOf Actions.Effect\n * @param {ImageSource} imageSource `import {image} from '@cloudinary/base/qualifiers/sources`\n * @return {Actions.Effect.StyleTransfer}\n */\nfunction styleTransfer(imageSource) {\n    return new StyleTransfer(imageSource);\n}\n/**\n * @summary action\n * @description\n * Causes a video clip to play forwards and then backwards.\n * Use in conjunction with trimming parameters ('duration', 'start_offset', or 'end_offset') and the 'loop' effect to deliver a classic (short, repeating) boomerang clip.<br/>\n * For details and examples, see 'Create a boomerang video clip' in the Video Transformations guide.\n * @memberOf Actions.Effect\n * @return {Actions.Effect.SimpleEffectAction}\n */\nfunction boomerang() {\n    return new SimpleEffectAction('boomerang');\n}\n/**\n * @summary action\n * @description\n * Removes red eyes with the Advanced Facial Attribute Detection add-on.\n * For details, see the Advanced Facial Attribute Detection add-on documentation.\n * @memberOf Actions.Effect\n * @return {Actions.Effect.SimpleEffectAction}\n */\nfunction advancedRedEye() {\n    return new SimpleEffectAction('adv_redeye');\n}\n/**\n * @summary action\n * @description Converts the image to black and white.\n * @memberOf Actions.Effect\n * @param {number | string} level The balance between black (100) and white (0). (Range: 0 to 100, Server default: 50)\n * @return {Actions.Effect.BlackwhiteEffectAction}\n */\nfunction blackwhite(level) {\n    return new BlackwhiteEffectAction('blackwhite', level);\n}\n/**\n * @summary action\n * @description Negates the image colors (negative).\n * @memberOf Actions.Effect\n * @return {Actions.Effect.SimpleEffectAction}\n */\nfunction negate() {\n    return new SimpleEffectAction('negate');\n}\n/**\n * @summary action\n * @description Removes red eyes in the image.\n * @memberOf Actions.Effect\n * @return {Actions.Effect.SimpleEffectAction}\n */\nfunction redEye() {\n    return new SimpleEffectAction('redeye');\n}\n/**\n * @summary action\n * @description Plays the video or audio file in reverse.\n * @memberOf Actions.Effect\n * @return {Actions.Effect.SimpleEffectAction}\n */\nfunction reverse() {\n    return new SimpleEffectAction('reverse');\n}\n/**\n * @summary action\n * @description Changes the speed of the video playback.\n * @memberOf Actions.Effect\n * @param {number} speedIncreasePercent The percentage change of speed. Positive numbers speed up the playback, negative numbers slow down the playback (Range: -50 to 100, Server default: 0)\n * @return {Actions.Effect.AccelerationEffectAction}\n */\nfunction accelerate(speedIncreasePercent) {\n    return new AccelerationEffectAction('accelerate', speedIncreasePercent);\n}\n/**\n * @summary action\n * @description\n * Fade in at the beginning of the video.\n * For details and examples, see 'Fade in and out' in the Video Transformations guide.\n * @memberOf Actions.Effect\n * @param {number} fadeLength The time in ms for the fade to occur. (Server default: 2000)\n * @return {Actions.Effect.FadeInEffectAction}\n */\nfunction fadeIn(fadeLength) {\n    return new FadeInEffectAction('fade', fadeLength);\n}\n/**\n * @summary action\n * @description\n * Fade out at the end of the video.\n * For details and examples, see 'Fade in and out' in the Video Transformations guide.\n * @memberOf Actions.Effect\n * @param {number} fadeLength The time in ms for the fade to occur. (Server default: 2000)\n * @return {Actions.Effect.FadeoutEffectAction}\n */\nfunction fadeOut(fadeLength) {\n    return new FadeoutEffectAction('fade', -fadeLength);\n}\n/**\n * @summary action\n * @description\n * Delivers a video or animated GIF that contains additional loops of the video/GIF.\n * The total number of iterations is the number of additional loops plus one. <br/>\n * For animated GIFs only, you can also specify the loop effect without a numeric value to instruct it to loop the GIF infinitely.\n * @memberOf Actions.Effect\n * @param {number} additionalLoops The additional number of times to play the video or animated GIF.\n * @return {Actions.Effect.LoopEffectAction}\n */\nfunction loop(additionalLoops) {\n    return new LoopEffectAction('loop', additionalLoops);\n}\n/**\n * @summary action\n * @description\n * Makes the background of the image transparent (or solid white for formats that do not support transparency).\n * The background is determined as all pixels that resemble the pixels on the edges of the image.\n *\n * @memberOf Actions.Effect\n * @param {number} tolerance The tolerance used to accommodate variance in the background color. (Range: 0 to 100, Server default: 10)\n * @return {Actions.Effect.MakeTransparentEffectAction}\n */\nfunction makeTransparent(tolerance) {\n    return new MakeTransparentEffectAction('make_transparent', tolerance);\n}\n/**\n * @summary action\n * @description Adds visual noise to the video, visible as a random flicker of \"dots\" or \"snow\".\n * @memberOf Actions.Effect\n * @param {number} percentage The percent of noise to apply. (Range: 0 to 100 Server default: 0)\n * @return {Actions.Effect.EffectActionWithLevel}\n */\nfunction noise(percentage) {\n    return new EffectActionWithLevel('noise', percentage);\n}\n/**\n * @summary action\n * @description Applies a vignette effect.\n * @memberOf Actions.Effect\n * @param {number} strength The strength of the vignette. (Range: 0 to 100, Server default: 20)\n * @return {Actions.Effect.EffectActionWithStrength}\n */\nfunction vignette(strength) {\n    return new EffectActionWithStrength('vignette', strength);\n}\n/**\n * @summary action\n * @description\n * Applies an ordered dither filter to the image.\n * Use the constants defined in {@link Qualifiers.Dither|@cloudinary/base/qualifiers/dither} for ditherType.\n * @memberOf Actions.Effect\n * @param {Qualifiers.Dither} ditherType - The dither type applied to the image\n * @return {Actions.Effect.DitherEffectAction}\n */\nfunction dither(ditherType) {\n    return new DitherEffectAction('ordered_dither', ditherType);\n}\n/**\n * @summary action\n * @description\n * Vectorizes the image.\n * Notes:\n * To deliver the image as a vector image, make sure to change the format (or URL extension) to a vector format, such as SVG.</br>\n * However, you can also deliver in a raster format if you just want to get the 'vectorized' graphic effect.</br>\n * Large images are scaled down to 1000 pixels in the largest dimension before vectorization.\n *\n * @memberOf Actions.Effect\n * @return {Actions.Effect.VectorizeEffectAction}\n */\nfunction vectorize() {\n    return new VectorizeEffectAction();\n}\n/**\n * @summary action\n * @description\n * Applies a gradient fade effect from one edge of the image.\n * Use .x() or .y() to indicate from which edge to fade and how much of the image should be faded.\n * Values of x and y can be specified as a percentage (Range: 0.0 to 1.0), or in pixels (integer values). <br/>\n * Positive values fade from the top (y) or left (x). Negative values fade from the bottom (y) or right (x). <br/>\n * By default, the gradient is applied to the top 50% of the image (y = 0.5).<br/>\n * Only one direction can be specified but the fade can be applied symmetrically using the mode parameter. </br>\n * To apply different amounts of fade to multiple edges, use chained fade effects.\n *\n * @memberOf Actions.Effect\n * @return {Actions.Effect.GradientFadeEffectAction}\n */\nfunction gradientFade() {\n    return new GradientFadeEffectAction();\n}\n/**\n * @summary action\n * @description\n * Applies stripes to the image to help people with common color-blind conditions to differentiate between colors that are similar for them.</br>\n * You can replace colors using the xRay() method of the \\Cloudinary\\Transformation\\AssistColorBlind class.\n * @memberOf Actions.Effect\n * @return {Actions.Effect.AssistColorBlindEffectAction}\n */\nfunction assistColorBlind() {\n    return new AssistColorBlindEffectAction();\n}\n/**\n * @summary action\n * @description\n * Simulates the way an image would appear to someone with the specified color blind condition. </br>\n * For a list of supported color blind conditions see {@link Qualifiers.SimulateColorBlindValues| types of color blindness} for possible values\n * @memberOf Actions.Effect\n * @return {Actions.Effect.SimulateColorBlindEffectAction}\n */\nfunction simulateColorBlind() {\n    return new SimulateColorBlindEffectAction();\n}\n/**\n * @summary action\n * @description Removes small motion shifts from the video. with a maximum extent of movement in the horizontal and vertical direction of 32 pixels\n * @memberOf Actions.Effect\n * @return {Actions.Effect.DeshakeEffectAction}\n */\nfunction deshake(pixels) {\n    return new DeshakeEffectAction('deshake', pixels);\n}\n/**\n * @summary action\n * @description Supports the concatenation of videos with a custom transition by including a transition video as an\n * additional layer and specifying the transition effect\n * @memberOf Actions.Effect\n * @return {Actions.Effect.SimpleEffectAction}\n */\nfunction transition() {\n    return new SimpleEffectAction('transition');\n}\n/**\n * @summary action\n * @description Applies a pixelatering filter to the asset.\n * @memberOf Actions.Effect\n * @param {number} squareSize The squareSize in the pixelation. (Range: 1 to 2000, Server default: 100)\n * @return {Actions.Effect.Pixelate}\n */\nfunction pixelate(squareSize) {\n    return new Pixelate(squareSize);\n}\n/**\n * @summary action\n * @description Makes the background of an image transparent (or solid white for JPGs).</br>\n *              Use when the background is a uniform color.\n *              {@link https://cloudinary.com/documentation/transformation_reference#e_bgremoval | Background Removal}\n *\n * @memberOf Actions.Effect\n * @return {Actions.Effect.RemoveBackgroundAction}\n */\nfunction removeBackground() {\n    return new RemoveBackgroundAction();\n}\n/**\n *\n * @description Changes the main background color to the one specified, as if a 'theme change' was applied (e.g. dark mode vs light mode).\n * @param {SystemColors} color\n * @return {Actions.Effect.ThemeEffect}\n */\nfunction theme(color) {\n    return new ThemeEffect(color);\n}\n/**\n * @description Defines effects that you can apply to transform your assets.\n * @memberOf Actions\n * @namespace Effect\n * @example\n * <caption>An <b>extreme</b> example of using many effects on the same asset</caption>\n * import {Cloudinary} from \"@cloudinary/base\";\n * // Import everything, or just the action you need for tree-shaking purposes\n * import {Effect, sepia} from \"@cloudinary/base/actions/effect\";\n * import {ArtisticFilter, alDente} from \"../../../src/qualifiers/artisticFilter\";\n * import {ShakeStrength, pixels16} from \"../../../src/qualifiers/shakeStrength\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n *\n * image.effect(Effect.advancedRedEye())\n * .effect(Effect.accelerate())\n * .effect(Effect.accelerate(100))\n * .effect(Effect.accelerate().rate(5))\n * .effect(Effect.boomerang())\n * .effect(Effect.blackwhite())\n * .effect(Effect.blackwhite(10))\n * .effect(Effect.blackwhite().threshold(20))\n * .effect(Effect.fadeIn(100))\n * .effect(Effect.fadeIn().duration(5))\n * .effect(Effect.fadeOut(100))\n * .effect(Effect.fadeOut().duration(5))\n * .effect(Effect.grayscale())\n * .effect(Effect.loop())\n * .effect(Effect.loop(100))\n * .effect(Effect.loop().additionalIterations(5))\n * .effect(Effect.makeTransparent())\n * .effect(Effect.makeTransparent(100))\n * .effect(Effect.makeTransparent().tolerance(5))\n * .effect(Effect.makeTransparent().tolerance(5).colorToReplace('red'))\n * .effect(Effect.noise())\n * .effect(Effect.noise(100))\n * .effect(Effect.noise().level(5))\n * .effect(Effect.negate())\n * .effect(Effect.reverse())\n * .effect(Effect.redEye())\n * .effect(Effect.sepia())\n * .effect(Effect.sepia(100))\n * .effect(Effect.sepia().level(5))\n * .effect(Effect.vignette())\n * .effect(Effect.vignette(100))\n * .effect(Effect.vignette().strength(5))\n * .effect(Effect.deshake())\n * .effect(Effect.deshake(10))\n * .effect(Effect.artisticFilter(alDente())\n * .effect(Effect.deshake().shakeStrength(pixels16()))\n */\nconst Effect = {\n    pixelate: pixelate,\n    deshake: deshake,\n    boomerang: boomerang,\n    advancedRedEye: advancedRedEye,\n    blackwhite,\n    negate: negate,\n    redEye: redEye,\n    reverse: reverse,\n    accelerate: accelerate,\n    fadeIn: fadeIn,\n    fadeOut: fadeOut,\n    loop: loop,\n    makeTransparent: makeTransparent,\n    noise: noise,\n    vignette: vignette,\n    blur: blur,\n    grayscale: grayscale,\n    sepia: sepia,\n    shadow: shadow,\n    colorize: colorize,\n    oilPaint: oilPaint,\n    artisticFilter: artisticFilter,\n    cartoonify: cartoonify,\n    outline: outline,\n    styleTransfer: styleTransfer,\n    gradientFade: gradientFade,\n    vectorize: vectorize,\n    assistColorBlind: assistColorBlind,\n    simulateColorBlind: simulateColorBlind,\n    transition: transition,\n    dither: dither,\n    removeBackground,\n    theme\n};\nexport { Effect, pixelate, deshake, boomerang, advancedRedEye, blackwhite, negate, redEye, reverse, accelerate, fadeIn, fadeOut, loop, makeTransparent, noise, vignette, blur, grayscale, sepia, shadow, colorize, oilPaint, artisticFilter, cartoonify, outline, styleTransfer, gradientFade, vectorize, assistColorBlind, simulateColorBlind, transition, dither, removeBackground, theme };\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,oBAAoB;AAC/C,SAASC,wBAAwB,QAAQ,6BAA6B;AACtE,SAASC,gBAAgB,QAAQ,uBAAuB;AACxD,SAASC,gBAAgB,QAAQ,qBAAqB;AACtD,SAASC,aAAa,QAAQ,kBAAkB;AAChD,SAASC,kBAAkB,QAAQ,2CAA2C;AAC9E,SAASC,2BAA2B,QAAQ,kCAAkC;AAC9E,SAASC,qBAAqB,QAAQ,oBAAoB;AAC1D,SAASC,8BAA8B,QAAQ,6BAA6B;AAC5E,SAASC,qBAAqB,QAAQ,8CAA8C;AACpF,SAASC,4BAA4B,QAAQ,2BAA2B;AACxE,SAASC,wBAAwB,QAAQ,uBAAuB;AAChE,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,SAASC,oBAAoB,QAAQ,mBAAmB;AACxD,SAASC,kBAAkB,QAAQ,iBAAiB;AACpD,SAASC,aAAa,QAAQ,wBAAwB;AACtD,SAASC,kBAAkB,QAAQ,iBAAiB;AACpD,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,SAASC,QAAQ,QAAQ,4BAA4B;AACrD,SAASC,wBAAwB,QAAQ,iDAAiD;AAC1F,SAASC,sBAAsB,QAAQ,6BAA6B;AACpE,SAASC,kBAAkB,QAAQ,yBAAyB;AAC5D,SAASC,sBAAsB,QAAQ,iCAAiC;AACxE,SAASC,WAAW,QAAQ,gBAAgB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,IAAIA,CAACC,SAAS,EAAE;EACrB,OAAO,IAAIzB,UAAU,CAACyB,SAAS,CAAC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,SAASA,CAAA,EAAG;EACjB,OAAO,IAAIrB,kBAAkB,CAAC,WAAW,CAAC;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASsB,KAAKA,CAACC,KAAK,EAAE;EAClB,OAAO,IAAInB,qBAAqB,CAAC,OAAO,EAAEmB,KAAK,CAAC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,MAAMA,CAACC,WAAW,EAAE;EACzB,OAAO,IAAIhB,kBAAkB,CAAC,QAAQ,EAAEgB,WAAW,CAAC;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,QAAQA,CAACC,aAAa,EAAE;EAC7B,OAAO,IAAInB,oBAAoB,CAAC,UAAU,EAAEmB,aAAa,CAAC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,QAAQA,CAACC,aAAa,EAAE;EAC7B,OAAO,IAAIf,wBAAwB,CAAC,WAAW,EAAEe,aAAa,CAAC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,cAAcA,CAACC,kBAAkB,EAAE;EACxC,OAAO,IAAI/B,kBAAkB,CAAC,KAAK,EAAE+B,kBAAkB,CAAC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,UAAUA,CAACC,eAAe,EAAE;EACjC,OAAO,IAAInC,gBAAgB,CAAC,YAAY,EAAEmC,eAAe,CAAC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,OAAOA,CAAA,EAAG;EACf,OAAO,IAAInC,aAAa,CAAC,CAAC;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASoC,aAAaA,CAACC,WAAW,EAAE;EAChC,OAAO,IAAI1B,aAAa,CAAC0B,WAAW,CAAC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,SAASA,CAAA,EAAG;EACjB,OAAO,IAAIrC,kBAAkB,CAAC,WAAW,CAAC;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASsC,cAAcA,CAAA,EAAG;EACtB,OAAO,IAAItC,kBAAkB,CAAC,YAAY,CAAC;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASuC,UAAUA,CAAChB,KAAK,EAAE;EACvB,OAAO,IAAIR,sBAAsB,CAAC,YAAY,EAAEQ,KAAK,CAAC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASiB,MAAMA,CAAA,EAAG;EACd,OAAO,IAAIxC,kBAAkB,CAAC,QAAQ,CAAC;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASyC,MAAMA,CAAA,EAAG;EACd,OAAO,IAAIzC,kBAAkB,CAAC,QAAQ,CAAC;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS0C,OAAOA,CAAA,EAAG;EACf,OAAO,IAAI1C,kBAAkB,CAAC,SAAS,CAAC;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS2C,UAAUA,CAACC,oBAAoB,EAAE;EACtC,OAAO,IAAIhD,wBAAwB,CAAC,YAAY,EAAEgD,oBAAoB,CAAC;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,MAAMA,CAACC,UAAU,EAAE;EACxB,OAAO,IAAI9B,kBAAkB,CAAC,MAAM,EAAE8B,UAAU,CAAC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,OAAOA,CAACD,UAAU,EAAE;EACzB,OAAO,IAAIvC,mBAAmB,CAAC,MAAM,EAAE,CAACuC,UAAU,CAAC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,IAAIA,CAACC,eAAe,EAAE;EAC3B,OAAO,IAAIpD,gBAAgB,CAAC,MAAM,EAAEoD,eAAe,CAAC;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,eAAeA,CAACC,SAAS,EAAE;EAChC,OAAO,IAAIlD,2BAA2B,CAAC,kBAAkB,EAAEkD,SAAS,CAAC;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,KAAKA,CAACC,UAAU,EAAE;EACvB,OAAO,IAAIjD,qBAAqB,CAAC,OAAO,EAAEiD,UAAU,CAAC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,QAAQA,CAACC,QAAQ,EAAE;EACxB,OAAO,IAAIzC,wBAAwB,CAAC,UAAU,EAAEyC,QAAQ,CAAC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,MAAMA,CAACC,UAAU,EAAE;EACxB,OAAO,IAAI9C,kBAAkB,CAAC,gBAAgB,EAAE8C,UAAU,CAAC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,SAASA,CAAA,EAAG;EACjB,OAAO,IAAIxD,qBAAqB,CAAC,CAAC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASyD,YAAYA,CAAA,EAAG;EACpB,OAAO,IAAIrD,wBAAwB,CAAC,CAAC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASsD,gBAAgBA,CAAA,EAAG;EACxB,OAAO,IAAIvD,4BAA4B,CAAC,CAAC;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASwD,kBAAkBA,CAAA,EAAG;EAC1B,OAAO,IAAI1D,8BAA8B,CAAC,CAAC;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS2D,OAAOA,CAACC,MAAM,EAAE;EACrB,OAAO,IAAInD,mBAAmB,CAAC,SAAS,EAAEmD,MAAM,CAAC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,UAAUA,CAAA,EAAG;EAClB,OAAO,IAAIhE,kBAAkB,CAAC,YAAY,CAAC;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASiE,QAAQA,CAACC,UAAU,EAAE;EAC1B,OAAO,IAAIrD,QAAQ,CAACqD,UAAU,CAAC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,gBAAgBA,CAAA,EAAG;EACxB,OAAO,IAAIlD,sBAAsB,CAAC,CAAC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASmD,KAAKA,CAACC,KAAK,EAAE;EAClB,OAAO,IAAInD,WAAW,CAACmD,KAAK,CAAC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,GAAG;EACXL,QAAQ,EAAEA,QAAQ;EAClBH,OAAO,EAAEA,OAAO;EAChBzB,SAAS,EAAEA,SAAS;EACpBC,cAAc,EAAEA,cAAc;EAC9BC,UAAU;EACVC,MAAM,EAAEA,MAAM;EACdC,MAAM,EAAEA,MAAM;EACdC,OAAO,EAAEA,OAAO;EAChBC,UAAU,EAAEA,UAAU;EACtBE,MAAM,EAAEA,MAAM;EACdE,OAAO,EAAEA,OAAO;EAChBC,IAAI,EAAEA,IAAI;EACVE,eAAe,EAAEA,eAAe;EAChCE,KAAK,EAAEA,KAAK;EACZE,QAAQ,EAAEA,QAAQ;EAClBnC,IAAI,EAAEA,IAAI;EACVE,SAAS,EAAEA,SAAS;EACpBC,KAAK,EAAEA,KAAK;EACZE,MAAM,EAAEA,MAAM;EACdE,QAAQ,EAAEA,QAAQ;EAClBE,QAAQ,EAAEA,QAAQ;EAClBE,cAAc,EAAEA,cAAc;EAC9BE,UAAU,EAAEA,UAAU;EACtBE,OAAO,EAAEA,OAAO;EAChBC,aAAa,EAAEA,aAAa;EAC5BwB,YAAY,EAAEA,YAAY;EAC1BD,SAAS,EAAEA,SAAS;EACpBE,gBAAgB,EAAEA,gBAAgB;EAClCC,kBAAkB,EAAEA,kBAAkB;EACtCG,UAAU,EAAEA,UAAU;EACtBR,MAAM,EAAEA,MAAM;EACdW,gBAAgB;EAChBC;AACJ,CAAC;AACD,SAASE,MAAM,EAAEL,QAAQ,EAAEH,OAAO,EAAEzB,SAAS,EAAEC,cAAc,EAAEC,UAAU,EAAEC,MAAM,EAAEC,MAAM,EAAEC,OAAO,EAAEC,UAAU,EAAEE,MAAM,EAAEE,OAAO,EAAEC,IAAI,EAAEE,eAAe,EAAEE,KAAK,EAAEE,QAAQ,EAAEnC,IAAI,EAAEE,SAAS,EAAEC,KAAK,EAAEE,MAAM,EAAEE,QAAQ,EAAEE,QAAQ,EAAEE,cAAc,EAAEE,UAAU,EAAEE,OAAO,EAAEC,aAAa,EAAEwB,YAAY,EAAED,SAAS,EAAEE,gBAAgB,EAAEC,kBAAkB,EAAEG,UAAU,EAAER,MAAM,EAAEW,gBAAgB,EAAEC,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}