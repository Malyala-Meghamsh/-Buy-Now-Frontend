{"ast":null,"code":"import { Qualifier } from \"../../internal/qualifier/Qualifier\";\nimport { Action } from \"../../internal/Action\";\nimport { toFloatAsString } from \"../../internal/utils/toFloatAsString\";\nimport { AspectRatioQualifierValue } from \"../../qualifiers/aspectRatio/AspectRatioQualifierValue\";\nimport { regionRelative, relative } from \"../../qualifiers/flag\";\nimport { FlagQualifier } from \"../../qualifiers/flag/FlagQualifier\";\n/**\n * @description Defines a resize using width and height.\n * @extends SDK.Action\n * @memberOf Actions.Resize\n * @see Visit {@link Actions.Resize| Resize} for examples\n */\nclass ResizeSimpleAction extends Action {\n  /**\n   * @param {string} cropType\n   * @param {number | string} cropWidth The required width of a transformed asset.\n   * @param {number | string} cropHeight The required height of a transformed asset.\n   */\n  constructor(cropType, cropWidth, cropHeight) {\n    super();\n    if (cropWidth) {\n      this.addQualifier(new Qualifier('w', cropWidth));\n    }\n    if (cropHeight) {\n      this.addQualifier(new Qualifier('h', cropHeight));\n    }\n    this.addQualifier(new Qualifier('c', cropType));\n  }\n  /**\n   * @description Sets the height of the resize\n   * @param {string | number} x The height in pixels (if an integer is specified) or as a percentage (if a float is specified).\n   */\n  height(x) {\n    return this.addQualifier(new Qualifier('h', x));\n  }\n  /**\n   * @description Sets the width of the resize\n   * @param {string | number} x The width in pixels (if an integer is specified) or as a percentage (if a float is specified).\n   */\n  width(x) {\n    return this.addQualifier(new Qualifier('w', x));\n  }\n  /**\n   * @description Sets the aspect ratio of the asset.\n   * For a list of supported types see {@link Qualifiers.AspectRatio |\n    * AspectRatio values}\n   * @param {number|string} ratio The new aspect ratio, specified as a percentage or ratio.\n   * @return {this}\n   */\n  aspectRatio(ratio) {\n    // toFloatAsString is used to ensure 1 turns into 1.0\n    if (ratio instanceof AspectRatioQualifierValue) {\n      return this.addQualifier(new Qualifier('ar', ratio));\n    }\n    if (typeof ratio === 'number' || typeof ratio === 'string') {\n      return this.addQualifier(new Qualifier('ar', toFloatAsString(ratio)));\n    }\n    if (ratio instanceof FlagQualifier) {\n      return this.addFlag(ratio);\n    }\n  }\n  /**\n   * @description Modifies percentage-based width & height parameters of overlays and underlays (e.g., 1.0) to be relative to the containing image instead of the added layer.\n   * @return {this}\n   */\n  relative() {\n    return this.addFlag(relative());\n  }\n  /**\n   * @description Modifies percentage-based width & height parameters of overlays and underlays (e.g., 1.0) to be relative to the overlaid region\n   * @return {this}\n   */\n  regionRelative() {\n    return this.addFlag(regionRelative());\n  }\n}\nexport default ResizeSimpleAction;","map":{"version":3,"names":["Qualifier","Action","toFloatAsString","AspectRatioQualifierValue","regionRelative","relative","FlagQualifier","ResizeSimpleAction","constructor","cropType","cropWidth","cropHeight","addQualifier","height","x","width","aspectRatio","ratio","addFlag"],"sources":["D:/VSCode/Project_Market_Place/client/node_modules/@cloudinary/base/actions/resize/ResizeSimpleAction.js"],"sourcesContent":["import { Qualifier } from \"../../internal/qualifier/Qualifier\";\nimport { Action } from \"../../internal/Action\";\nimport { toFloatAsString } from \"../../internal/utils/toFloatAsString\";\nimport { AspectRatioQualifierValue } from \"../../qualifiers/aspectRatio/AspectRatioQualifierValue\";\nimport { regionRelative, relative } from \"../../qualifiers/flag\";\nimport { FlagQualifier } from \"../../qualifiers/flag/FlagQualifier\";\n/**\n * @description Defines a resize using width and height.\n * @extends SDK.Action\n * @memberOf Actions.Resize\n * @see Visit {@link Actions.Resize| Resize} for examples\n */\nclass ResizeSimpleAction extends Action {\n    /**\n     * @param {string} cropType\n     * @param {number | string} cropWidth The required width of a transformed asset.\n     * @param {number | string} cropHeight The required height of a transformed asset.\n     */\n    constructor(cropType, cropWidth, cropHeight) {\n        super();\n        if (cropWidth) {\n            this.addQualifier(new Qualifier('w', cropWidth));\n        }\n        if (cropHeight) {\n            this.addQualifier(new Qualifier('h', cropHeight));\n        }\n        this.addQualifier(new Qualifier('c', cropType));\n    }\n    /**\n     * @description Sets the height of the resize\n     * @param {string | number} x The height in pixels (if an integer is specified) or as a percentage (if a float is specified).\n     */\n    height(x) {\n        return this.addQualifier(new Qualifier('h', x));\n    }\n    /**\n     * @description Sets the width of the resize\n     * @param {string | number} x The width in pixels (if an integer is specified) or as a percentage (if a float is specified).\n     */\n    width(x) {\n        return this.addQualifier(new Qualifier('w', x));\n    }\n    /**\n     * @description Sets the aspect ratio of the asset.\n     * For a list of supported types see {@link Qualifiers.AspectRatio |\n      * AspectRatio values}\n     * @param {number|string} ratio The new aspect ratio, specified as a percentage or ratio.\n     * @return {this}\n     */\n    aspectRatio(ratio) {\n        // toFloatAsString is used to ensure 1 turns into 1.0\n        if (ratio instanceof AspectRatioQualifierValue) {\n            return this.addQualifier(new Qualifier('ar', ratio));\n        }\n        if (typeof ratio === 'number' || typeof ratio === 'string') {\n            return this.addQualifier(new Qualifier('ar', toFloatAsString(ratio)));\n        }\n        if (ratio instanceof FlagQualifier) {\n            return this.addFlag(ratio);\n        }\n    }\n    /**\n     * @description Modifies percentage-based width & height parameters of overlays and underlays (e.g., 1.0) to be relative to the containing image instead of the added layer.\n     * @return {this}\n     */\n    relative() {\n        return this.addFlag(relative());\n    }\n    /**\n     * @description Modifies percentage-based width & height parameters of overlays and underlays (e.g., 1.0) to be relative to the overlaid region\n     * @return {this}\n     */\n    regionRelative() {\n        return this.addFlag(regionRelative());\n    }\n}\nexport default ResizeSimpleAction;\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,oCAAoC;AAC9D,SAASC,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,eAAe,QAAQ,sCAAsC;AACtE,SAASC,yBAAyB,QAAQ,wDAAwD;AAClG,SAASC,cAAc,EAAEC,QAAQ,QAAQ,uBAAuB;AAChE,SAASC,aAAa,QAAQ,qCAAqC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,kBAAkB,SAASN,MAAM,CAAC;EACpC;AACJ;AACA;AACA;AACA;EACIO,WAAWA,CAACC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,EAAE;IACzC,KAAK,CAAC,CAAC;IACP,IAAID,SAAS,EAAE;MACX,IAAI,CAACE,YAAY,CAAC,IAAIZ,SAAS,CAAC,GAAG,EAAEU,SAAS,CAAC,CAAC;IACpD;IACA,IAAIC,UAAU,EAAE;MACZ,IAAI,CAACC,YAAY,CAAC,IAAIZ,SAAS,CAAC,GAAG,EAAEW,UAAU,CAAC,CAAC;IACrD;IACA,IAAI,CAACC,YAAY,CAAC,IAAIZ,SAAS,CAAC,GAAG,EAAES,QAAQ,CAAC,CAAC;EACnD;EACA;AACJ;AACA;AACA;EACII,MAAMA,CAACC,CAAC,EAAE;IACN,OAAO,IAAI,CAACF,YAAY,CAAC,IAAIZ,SAAS,CAAC,GAAG,EAAEc,CAAC,CAAC,CAAC;EACnD;EACA;AACJ;AACA;AACA;EACIC,KAAKA,CAACD,CAAC,EAAE;IACL,OAAO,IAAI,CAACF,YAAY,CAAC,IAAIZ,SAAS,CAAC,GAAG,EAAEc,CAAC,CAAC,CAAC;EACnD;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIE,WAAWA,CAACC,KAAK,EAAE;IACf;IACA,IAAIA,KAAK,YAAYd,yBAAyB,EAAE;MAC5C,OAAO,IAAI,CAACS,YAAY,CAAC,IAAIZ,SAAS,CAAC,IAAI,EAAEiB,KAAK,CAAC,CAAC;IACxD;IACA,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MACxD,OAAO,IAAI,CAACL,YAAY,CAAC,IAAIZ,SAAS,CAAC,IAAI,EAAEE,eAAe,CAACe,KAAK,CAAC,CAAC,CAAC;IACzE;IACA,IAAIA,KAAK,YAAYX,aAAa,EAAE;MAChC,OAAO,IAAI,CAACY,OAAO,CAACD,KAAK,CAAC;IAC9B;EACJ;EACA;AACJ;AACA;AACA;EACIZ,QAAQA,CAAA,EAAG;IACP,OAAO,IAAI,CAACa,OAAO,CAACb,QAAQ,CAAC,CAAC,CAAC;EACnC;EACA;AACJ;AACA;AACA;EACID,cAAcA,CAAA,EAAG;IACb,OAAO,IAAI,CAACc,OAAO,CAACd,cAAc,CAAC,CAAC,CAAC;EACzC;AACJ;AACA,eAAeG,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}