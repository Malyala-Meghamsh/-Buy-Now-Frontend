{"ast":null,"code":"import { Action } from \"../internal/Action\";\nimport { BackgroundColor } from \"../actions/background/actions/BackgroundColor\";\nimport { prepareColor } from \"../internal/utils/prepareColor\";\nimport { FlagQualifier } from \"../qualifiers/flag/FlagQualifier\";\nimport { RawAction } from \"../internal/RawAction\";\n/**\n * @summary SDK\n * @description - Defines how to transform an asset\n * @memberOf SDK\n */\nclass Transformation {\n  constructor() {\n    this.actions = [];\n  }\n  /**\n   * @param {SDK.Action | string} action\n   * @return {this}\n   */\n  addAction(action) {\n    let actionToAdd;\n    if (typeof action === 'string') {\n      if (action.indexOf('/') >= 0) {\n        throw 'addAction cannot accept a string with a forward slash in it - /, use .addTransformation() instead';\n      } else {\n        actionToAdd = new RawAction(action);\n      }\n    } else {\n      actionToAdd = action;\n    }\n    this.actions.push(actionToAdd);\n    return this;\n  }\n  /**\n   * @description Allows the injection of a raw transformation as a string into the transformation, or a Transformation instance that was previously created\n   * @param {string | SDK.Transformation} tx\n   * @example\n   * import {Transformation} from \"@cloudinary/base\";\n   *\n   * const transformation = new Transformation();\n   * transformation.addTransformation('w_100/w_200/w_300');\n   * @return {this}\n   */\n  addTransformation(tx) {\n    if (tx instanceof Transformation) {\n      // Concat the new actions into the existing actions\n      this.actions = this.actions.concat(tx.actions);\n    } else {\n      this.actions.push(new RawAction(tx));\n    }\n    return this;\n  }\n  /**\n   * @return {string}\n   */\n  toString() {\n    return this.actions.map(action => {\n      return action.toString();\n    }).filter(a => a).join('/');\n  }\n  /**\n   * @description Delivers an animated GIF.\n   * @param {AnimatedAction} animatedAction\n   * @return {this}\n   */\n  animated(animatedAction) {\n    return this.addAction(animatedAction);\n  }\n  /**\n   * @description Adds a border around the image.\n   * @param {Border} borderAction\n   * @return {this}\n   */\n  border(borderAction) {\n    return this.addAction(borderAction);\n  }\n  /**\n   * @description Adjusts the shape of the delivered image. </br>\n   * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_transformations#image_shape_changes_and_distortion_effects|Shape changes and distortion effects}\n   * @param {IReshape} reshapeAction\n   * @return {this}\n   */\n  reshape(reshapeAction) {\n    return this.addAction(reshapeAction);\n  }\n  /**\n   * @description Resize the asset using provided resize action\n   * @param {ResizeSimpleAction} resizeAction\n   * @return {this}\n   */\n  resize(resizeAction) {\n    return this.addAction(resizeAction);\n  }\n  /**\n   * @param {DeliveryAction} quality\n   * @return {this}\n   */\n  quality(quality) {\n    return this.addAction(quality);\n  }\n  /**\n   * @description Rounds the specified corners of an image.\n   * @param roundCornersAction\n   * @return {this}\n   */\n  roundCorners(roundCornersAction) {\n    return this.addAction(roundCornersAction);\n  }\n  /**\n   * @description Adds an overlay over the base image.\n   * @param {LayerAction} overlayAction\n   * @return {this}\n   */\n  overlay(overlayAction) {\n    return this.addAction(overlayAction);\n  }\n  /**\n   * @description Adds an underlay under the base image.\n   * @param {LayerAction} underlayAction\n   * @return {this}\n   */\n  underlay(underlayAction) {\n    underlayAction.setLayerType('u');\n    return this.addAction(underlayAction);\n  }\n  /**\n   * @description Defines an new user variable.\n   * @param {VariableAction} variableAction\n   * @return {this}\n   */\n  addVariable(variableAction) {\n    return this.addAction(variableAction);\n  }\n  /**\n   * @description Specifies a condition to be met before applying a transformation.\n   * @param {ConditionalAction} conditionAction\n   * @return {this}\n   */\n  conditional(conditionAction) {\n    return this.addAction(conditionAction);\n  }\n  /**\n   * @description Applies a filter or an effect on an asset.\n   * @param {SimpleEffectAction} effectAction\n   * @return {this}\n   */\n  effect(effectAction) {\n    return this.addAction(effectAction);\n  }\n  /**\n   * @description Applies adjustment effect on an asset.\n   * @param action\n   * @return {this}\n   */\n  adjust(action) {\n    return this.addAction(action);\n  }\n  /**\n   * @description Rotates the asset by the given angle.\n   * @param {RotateAction} rotateAction\n   * @return {this}\n   */\n  rotate(rotateAction) {\n    return this.addAction(rotateAction);\n  }\n  /**\n   * @description Applies a pre-defined named transformation of the given name.\n   * @param {NamedTransformation} namedTransformation\n   * @return {this}\n   */\n  namedTransformation(namedTransformation) {\n    return this.addAction(namedTransformation);\n  }\n  /**\n   * @description Applies delivery action.\n   * @param deliveryAction\n   * @return {this}\n   */\n  delivery(deliveryAction) {\n    return this.addAction(deliveryAction);\n  }\n  /**\n   * @description Sets the color of the background.\n   * @param {Qualifiers.Color} color\n   * @return {this}\n   */\n  backgroundColor(color) {\n    return this.addAction(new BackgroundColor(prepareColor(color)));\n  }\n  /**\n   * @description Adds a layer in a Photoshop document.\n   * @param action\n   * @return {this}\n   */\n  psdTools(action) {\n    return this.addAction(action);\n  }\n  /**\n   * @description Extracts an image or a page using an index, a range, or a name from a layered media asset.\n   * @param action\n   * @return {this}\n   */\n  extract(action) {\n    return this.addAction(action);\n  }\n  /**\n   * @description Adds a flag as a separate action.\n   * @param {Qualifiers.Flag | string} flagQualifier\n   * @return {this}\n   */\n  addFlag(flagQualifier) {\n    const action = new Action();\n    let flagToAdd = flagQualifier;\n    if (typeof flagQualifier === 'string') {\n      flagToAdd = new FlagQualifier(flagQualifier);\n    }\n    action.addQualifier(flagToAdd);\n    return this.addAction(action);\n  }\n  /**\n   * @description Inject a custom function into the image transformation pipeline.\n   * @return {this}\n   */\n  customFunction(customFunction) {\n    return this.addAction(customFunction);\n  }\n  /**\n   * Transcodes the video (or audio) to another format.\n   * @param {Action} action\n   * @return {this}\n   */\n  transcode(action) {\n    return this.addAction(action);\n  }\n  /**\n   * Applies the specified video edit action.\n   *\n   * @param {videoEditType} action\n   * @return {this}\n   */\n  videoEdit(action) {\n    return this.addAction(action);\n  }\n}\nexport { Transformation };","map":{"version":3,"names":["Action","BackgroundColor","prepareColor","FlagQualifier","RawAction","Transformation","constructor","actions","addAction","action","actionToAdd","indexOf","push","addTransformation","tx","concat","toString","map","filter","a","join","animated","animatedAction","border","borderAction","reshape","reshapeAction","resize","resizeAction","quality","roundCorners","roundCornersAction","overlay","overlayAction","underlay","underlayAction","setLayerType","addVariable","variableAction","conditional","conditionAction","effect","effectAction","adjust","rotate","rotateAction","namedTransformation","delivery","deliveryAction","backgroundColor","color","psdTools","extract","addFlag","flagQualifier","flagToAdd","addQualifier","customFunction","transcode","videoEdit"],"sources":["D:/VSCode/Project_Market_Place/client/node_modules/@cloudinary/base/transformation/Transformation.js"],"sourcesContent":["import { Action } from \"../internal/Action\";\nimport { BackgroundColor } from \"../actions/background/actions/BackgroundColor\";\nimport { prepareColor } from \"../internal/utils/prepareColor\";\nimport { FlagQualifier } from \"../qualifiers/flag/FlagQualifier\";\nimport { RawAction } from \"../internal/RawAction\";\n/**\n * @summary SDK\n * @description - Defines how to transform an asset\n * @memberOf SDK\n */\nclass Transformation {\n    constructor() {\n        this.actions = [];\n    }\n    /**\n     * @param {SDK.Action | string} action\n     * @return {this}\n     */\n    addAction(action) {\n        let actionToAdd;\n        if (typeof action === 'string') {\n            if (action.indexOf('/') >= 0) {\n                throw 'addAction cannot accept a string with a forward slash in it - /, use .addTransformation() instead';\n            }\n            else {\n                actionToAdd = new RawAction(action);\n            }\n        }\n        else {\n            actionToAdd = action;\n        }\n        this.actions.push(actionToAdd);\n        return this;\n    }\n    /**\n     * @description Allows the injection of a raw transformation as a string into the transformation, or a Transformation instance that was previously created\n     * @param {string | SDK.Transformation} tx\n     * @example\n     * import {Transformation} from \"@cloudinary/base\";\n     *\n     * const transformation = new Transformation();\n     * transformation.addTransformation('w_100/w_200/w_300');\n     * @return {this}\n     */\n    addTransformation(tx) {\n        if (tx instanceof Transformation) {\n            // Concat the new actions into the existing actions\n            this.actions = this.actions.concat(tx.actions);\n        }\n        else {\n            this.actions.push(new RawAction(tx));\n        }\n        return this;\n    }\n    /**\n     * @return {string}\n     */\n    toString() {\n        return this.actions\n            .map((action) => {\n            return action.toString();\n        })\n            .filter((a) => a)\n            .join('/');\n    }\n    /**\n     * @description Delivers an animated GIF.\n     * @param {AnimatedAction} animatedAction\n     * @return {this}\n     */\n    animated(animatedAction) {\n        return this.addAction(animatedAction);\n    }\n    /**\n     * @description Adds a border around the image.\n     * @param {Border} borderAction\n     * @return {this}\n     */\n    border(borderAction) {\n        return this.addAction(borderAction);\n    }\n    /**\n     * @description Adjusts the shape of the delivered image. </br>\n     * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_transformations#image_shape_changes_and_distortion_effects|Shape changes and distortion effects}\n     * @param {IReshape} reshapeAction\n     * @return {this}\n     */\n    reshape(reshapeAction) {\n        return this.addAction(reshapeAction);\n    }\n    /**\n     * @description Resize the asset using provided resize action\n     * @param {ResizeSimpleAction} resizeAction\n     * @return {this}\n     */\n    resize(resizeAction) {\n        return this.addAction(resizeAction);\n    }\n    /**\n     * @param {DeliveryAction} quality\n     * @return {this}\n     */\n    quality(quality) {\n        return this.addAction(quality);\n    }\n    /**\n     * @description Rounds the specified corners of an image.\n     * @param roundCornersAction\n     * @return {this}\n     */\n    roundCorners(roundCornersAction) {\n        return this.addAction(roundCornersAction);\n    }\n    /**\n     * @description Adds an overlay over the base image.\n     * @param {LayerAction} overlayAction\n     * @return {this}\n     */\n    overlay(overlayAction) {\n        return this.addAction(overlayAction);\n    }\n    /**\n     * @description Adds an underlay under the base image.\n     * @param {LayerAction} underlayAction\n     * @return {this}\n     */\n    underlay(underlayAction) {\n        underlayAction.setLayerType('u');\n        return this.addAction(underlayAction);\n    }\n    /**\n     * @description Defines an new user variable.\n     * @param {VariableAction} variableAction\n     * @return {this}\n     */\n    addVariable(variableAction) {\n        return this.addAction(variableAction);\n    }\n    /**\n     * @description Specifies a condition to be met before applying a transformation.\n     * @param {ConditionalAction} conditionAction\n     * @return {this}\n     */\n    conditional(conditionAction) {\n        return this.addAction(conditionAction);\n    }\n    /**\n     * @description Applies a filter or an effect on an asset.\n     * @param {SimpleEffectAction} effectAction\n     * @return {this}\n     */\n    effect(effectAction) {\n        return this.addAction(effectAction);\n    }\n    /**\n     * @description Applies adjustment effect on an asset.\n     * @param action\n     * @return {this}\n     */\n    adjust(action) {\n        return this.addAction(action);\n    }\n    /**\n     * @description Rotates the asset by the given angle.\n     * @param {RotateAction} rotateAction\n     * @return {this}\n     */\n    rotate(rotateAction) {\n        return this.addAction(rotateAction);\n    }\n    /**\n     * @description Applies a pre-defined named transformation of the given name.\n     * @param {NamedTransformation} namedTransformation\n     * @return {this}\n     */\n    namedTransformation(namedTransformation) {\n        return this.addAction(namedTransformation);\n    }\n    /**\n     * @description Applies delivery action.\n     * @param deliveryAction\n     * @return {this}\n     */\n    delivery(deliveryAction) {\n        return this.addAction(deliveryAction);\n    }\n    /**\n     * @description Sets the color of the background.\n     * @param {Qualifiers.Color} color\n     * @return {this}\n     */\n    backgroundColor(color) {\n        return this.addAction(new BackgroundColor(prepareColor(color)));\n    }\n    /**\n     * @description Adds a layer in a Photoshop document.\n     * @param action\n     * @return {this}\n     */\n    psdTools(action) {\n        return this.addAction(action);\n    }\n    /**\n     * @description Extracts an image or a page using an index, a range, or a name from a layered media asset.\n     * @param action\n     * @return {this}\n     */\n    extract(action) {\n        return this.addAction(action);\n    }\n    /**\n     * @description Adds a flag as a separate action.\n     * @param {Qualifiers.Flag | string} flagQualifier\n     * @return {this}\n     */\n    addFlag(flagQualifier) {\n        const action = new Action();\n        let flagToAdd = flagQualifier;\n        if (typeof flagQualifier === 'string') {\n            flagToAdd = new FlagQualifier(flagQualifier);\n        }\n        action.addQualifier(flagToAdd);\n        return this.addAction(action);\n    }\n    /**\n     * @description Inject a custom function into the image transformation pipeline.\n     * @return {this}\n     */\n    customFunction(customFunction) {\n        return this.addAction(customFunction);\n    }\n    /**\n     * Transcodes the video (or audio) to another format.\n     * @param {Action} action\n     * @return {this}\n     */\n    transcode(action) {\n        return this.addAction(action);\n    }\n    /**\n     * Applies the specified video edit action.\n     *\n     * @param {videoEditType} action\n     * @return {this}\n     */\n    videoEdit(action) {\n        return this.addAction(action);\n    }\n}\nexport { Transformation };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}