{"ast":null,"code":"import { Action } from \"../../internal/Action\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue\";\n/**\n * @description Vectorizes the image.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass VectorizeEffectAction extends Action {\n  constructor() {\n    super();\n  }\n  /**\n   * @description The number of colors. (Range: 2 to 30, Server default: 10)\n   * @param {number | string} num\n   * @return {this}\n   */\n  numOfColors(num) {\n    this._numOfColors = num;\n    return this;\n  }\n  /**\n   * @description The level of detail. Specify either a percentage of the original image (Range: 0.0 to 1.0) or an absolute number of pixels (Range: 0 to 1000). (Server default: 300)\n   * @param {number | string} num\n   * @return {this}\n   */\n  detailsLevel(num) {\n    this._detailsLevel = num;\n    return this;\n  }\n  /**\n   * @description The size of speckles to suppress. Specify either a percentage of the original image (Range: 0.0 to 1.0) or an absolute number of pixels (Range: 0 to 100, Server default: 2)\n   * @param {number | string} num\n   * @return {this}\n   */\n  despeckleLevel(num) {\n    this._despeckleLevel = num;\n    return this;\n  }\n  /**\n   * @description The corner threshold. Specify 100 for no smoothing (polygon corners), 0 for completely smooth corners. (Range: 0 to 100, Default: 25)\n   * @param {number | string} num\n   * @return {this}\n   */\n  cornersLevel(num) {\n    this._cornersLevel = num;\n    return this;\n  }\n  /**\n   * @description The optimization value. Specify 100 for least optimization and the largest file. (Range: 0 to 100, Server default: 100).\n   * @param {number} num\n   * @return {this}\n   */\n  paths(num) {\n    this._paths = num;\n    return this;\n  }\n  prepareQualifiers() {\n    let str = 'vectorize';\n    if (this._numOfColors) {\n      str += `:${new QualifierValue(`colors:${this._numOfColors}`).toString()}`;\n    }\n    if (this._detailsLevel) {\n      str += `:${new QualifierValue(`detail:${this._detailsLevel}`).toString()}`;\n    }\n    if (this._despeckleLevel) {\n      str += `:${new QualifierValue(`despeckle:${this._despeckleLevel}`).toString()}`;\n    }\n    if (this._paths) {\n      str += `:${new QualifierValue(`paths:${this._paths}`).toString()}`;\n    }\n    if (this._cornersLevel) {\n      str += `:${new QualifierValue(`corners:${this._cornersLevel}`).toString()}`;\n    }\n    this.addQualifier(new Qualifier('e', str));\n  }\n}\nexport { VectorizeEffectAction };","map":{"version":3,"names":["Action","Qualifier","QualifierValue","VectorizeEffectAction","constructor","numOfColors","num","_numOfColors","detailsLevel","_detailsLevel","despeckleLevel","_despeckleLevel","cornersLevel","_cornersLevel","paths","_paths","prepareQualifiers","str","toString","addQualifier"],"sources":["D:/VSCode/Project_Market_Place/client/node_modules/@cloudinary/base/actions/effect/vectorize.js"],"sourcesContent":["import { Action } from \"../../internal/Action\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue\";\n/**\n * @description Vectorizes the image.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass VectorizeEffectAction extends Action {\n    constructor() {\n        super();\n    }\n    /**\n     * @description The number of colors. (Range: 2 to 30, Server default: 10)\n     * @param {number | string} num\n     * @return {this}\n     */\n    numOfColors(num) {\n        this._numOfColors = num;\n        return this;\n    }\n    /**\n     * @description The level of detail. Specify either a percentage of the original image (Range: 0.0 to 1.0) or an absolute number of pixels (Range: 0 to 1000). (Server default: 300)\n     * @param {number | string} num\n     * @return {this}\n     */\n    detailsLevel(num) {\n        this._detailsLevel = num;\n        return this;\n    }\n    /**\n     * @description The size of speckles to suppress. Specify either a percentage of the original image (Range: 0.0 to 1.0) or an absolute number of pixels (Range: 0 to 100, Server default: 2)\n     * @param {number | string} num\n     * @return {this}\n     */\n    despeckleLevel(num) {\n        this._despeckleLevel = num;\n        return this;\n    }\n    /**\n     * @description The corner threshold. Specify 100 for no smoothing (polygon corners), 0 for completely smooth corners. (Range: 0 to 100, Default: 25)\n     * @param {number | string} num\n     * @return {this}\n     */\n    cornersLevel(num) {\n        this._cornersLevel = num;\n        return this;\n    }\n    /**\n     * @description The optimization value. Specify 100 for least optimization and the largest file. (Range: 0 to 100, Server default: 100).\n     * @param {number} num\n     * @return {this}\n     */\n    paths(num) {\n        this._paths = num;\n        return this;\n    }\n    prepareQualifiers() {\n        let str = 'vectorize';\n        if (this._numOfColors) {\n            str += `:${new QualifierValue(`colors:${this._numOfColors}`).toString()}`;\n        }\n        if (this._detailsLevel) {\n            str += `:${new QualifierValue(`detail:${this._detailsLevel}`).toString()}`;\n        }\n        if (this._despeckleLevel) {\n            str += `:${new QualifierValue(`despeckle:${this._despeckleLevel}`).toString()}`;\n        }\n        if (this._paths) {\n            str += `:${new QualifierValue(`paths:${this._paths}`).toString()}`;\n        }\n        if (this._cornersLevel) {\n            str += `:${new QualifierValue(`corners:${this._cornersLevel}`).toString()}`;\n        }\n        this.addQualifier(new Qualifier('e', str));\n    }\n}\nexport { VectorizeEffectAction };\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,SAAS,QAAQ,oCAAoC;AAC9D,SAASC,cAAc,QAAQ,yCAAyC;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,qBAAqB,SAASH,MAAM,CAAC;EACvCI,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,CAAC;EACX;EACA;AACJ;AACA;AACA;AACA;EACIC,WAAWA,CAACC,GAAG,EAAE;IACb,IAAI,CAACC,YAAY,GAAGD,GAAG;IACvB,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;EACIE,YAAYA,CAACF,GAAG,EAAE;IACd,IAAI,CAACG,aAAa,GAAGH,GAAG;IACxB,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;EACII,cAAcA,CAACJ,GAAG,EAAE;IAChB,IAAI,CAACK,eAAe,GAAGL,GAAG;IAC1B,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;EACIM,YAAYA,CAACN,GAAG,EAAE;IACd,IAAI,CAACO,aAAa,GAAGP,GAAG;IACxB,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;EACIQ,KAAKA,CAACR,GAAG,EAAE;IACP,IAAI,CAACS,MAAM,GAAGT,GAAG;IACjB,OAAO,IAAI;EACf;EACAU,iBAAiBA,CAAA,EAAG;IAChB,IAAIC,GAAG,GAAG,WAAW;IACrB,IAAI,IAAI,CAACV,YAAY,EAAE;MACnBU,GAAG,IAAK,IAAG,IAAIf,cAAc,CAAE,UAAS,IAAI,CAACK,YAAa,EAAC,CAAC,CAACW,QAAQ,CAAC,CAAE,EAAC;IAC7E;IACA,IAAI,IAAI,CAACT,aAAa,EAAE;MACpBQ,GAAG,IAAK,IAAG,IAAIf,cAAc,CAAE,UAAS,IAAI,CAACO,aAAc,EAAC,CAAC,CAACS,QAAQ,CAAC,CAAE,EAAC;IAC9E;IACA,IAAI,IAAI,CAACP,eAAe,EAAE;MACtBM,GAAG,IAAK,IAAG,IAAIf,cAAc,CAAE,aAAY,IAAI,CAACS,eAAgB,EAAC,CAAC,CAACO,QAAQ,CAAC,CAAE,EAAC;IACnF;IACA,IAAI,IAAI,CAACH,MAAM,EAAE;MACbE,GAAG,IAAK,IAAG,IAAIf,cAAc,CAAE,SAAQ,IAAI,CAACa,MAAO,EAAC,CAAC,CAACG,QAAQ,CAAC,CAAE,EAAC;IACtE;IACA,IAAI,IAAI,CAACL,aAAa,EAAE;MACpBI,GAAG,IAAK,IAAG,IAAIf,cAAc,CAAE,WAAU,IAAI,CAACW,aAAc,EAAC,CAAC,CAACK,QAAQ,CAAC,CAAE,EAAC;IAC/E;IACA,IAAI,CAACC,YAAY,CAAC,IAAIlB,SAAS,CAAC,GAAG,EAAEgB,GAAG,CAAC,CAAC;EAC9C;AACJ;AACA,SAASd,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}