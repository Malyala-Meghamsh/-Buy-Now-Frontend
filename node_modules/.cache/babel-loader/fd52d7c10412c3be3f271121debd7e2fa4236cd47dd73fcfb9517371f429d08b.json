{"ast":null,"code":"import { Action } from \"../../internal/Action\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier\";\n/**\n * @description Class for shortening a video to the specified range.\n * @extends SDK.Action\n * @memberOf Actions.VideoEdit\n * @see Visit {@link Actions.VideoEdit|VideoEdit} for an example\n */\nclass TrimAction extends Action {\n  constructor() {\n    super();\n  }\n  /**\n   *\n   * @description Support Percentages in values (30% -> 30p)\n   * @param {string|number} val\n   * @private\n   * @return {string}\n   */\n  parseVal(val) {\n    return typeof val === 'number' ? val : val.replace('%', 'p');\n  }\n  /**\n   * @description Sets the starting position of the part of the video to keep when trimming videos.\n   *\n   * @param {string|number} offset The starting position of the part of the video to keep. This can be specified as a\n   *                           float representing the time in seconds or a string representing the percentage of the\n   *                           video length (for example, \"30%\" or \"30p\").\n   * @return {this}\n   */\n  startOffset(offset) {\n    return this.addQualifier(new Qualifier('so', this.parseVal(offset)));\n  }\n  /**\n   * @description Sets the end position of the part of the video to keep when trimming videos.\n   *\n   * @param {string|number} offset The end position of the part of the video to keep. This can be specified as a\n   *                         float representing the time in seconds or a string representing the percentage of the\n   *                         video length (for example, \"30%\" or \"30p\").\n   * @return {this}\n   */\n  endOffset(offset) {\n    return this.addQualifier(new Qualifier('eo', this.parseVal(offset)));\n  }\n  /**\n   * @description Sets the duration of the video to keep.\n   *\n   * @param {string|number} duration The length of the part of the video to keep. This can be specified as a float\n   *                        representing the time in seconds or a string representing the percentage of the\n   *                        video length (for example, \"30%\" or \"30p\").\n   * @return {this}\n   */\n  duration(duration) {\n    return this.addQualifier(new Qualifier('du', this.parseVal(duration)));\n  }\n}\nexport default TrimAction;","map":{"version":3,"names":["Action","Qualifier","TrimAction","constructor","parseVal","val","replace","startOffset","offset","addQualifier","endOffset","duration"],"sources":["D:/VSCode/Project_Market_Place/client/node_modules/@cloudinary/base/actions/videoEdit/TrimAction.js"],"sourcesContent":["import { Action } from \"../../internal/Action\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier\";\n/**\n * @description Class for shortening a video to the specified range.\n * @extends SDK.Action\n * @memberOf Actions.VideoEdit\n * @see Visit {@link Actions.VideoEdit|VideoEdit} for an example\n */\nclass TrimAction extends Action {\n    constructor() {\n        super();\n    }\n    /**\n     *\n     * @description Support Percentages in values (30% -> 30p)\n     * @param {string|number} val\n     * @private\n     * @return {string}\n     */\n    parseVal(val) {\n        return typeof val === 'number' ? val : val.replace('%', 'p');\n    }\n    /**\n     * @description Sets the starting position of the part of the video to keep when trimming videos.\n     *\n     * @param {string|number} offset The starting position of the part of the video to keep. This can be specified as a\n     *                           float representing the time in seconds or a string representing the percentage of the\n     *                           video length (for example, \"30%\" or \"30p\").\n     * @return {this}\n     */\n    startOffset(offset) {\n        return this.addQualifier(new Qualifier('so', this.parseVal(offset)));\n    }\n    /**\n     * @description Sets the end position of the part of the video to keep when trimming videos.\n     *\n     * @param {string|number} offset The end position of the part of the video to keep. This can be specified as a\n     *                         float representing the time in seconds or a string representing the percentage of the\n     *                         video length (for example, \"30%\" or \"30p\").\n     * @return {this}\n     */\n    endOffset(offset) {\n        return this.addQualifier(new Qualifier('eo', this.parseVal(offset)));\n    }\n    /**\n     * @description Sets the duration of the video to keep.\n     *\n     * @param {string|number} duration The length of the part of the video to keep. This can be specified as a float\n     *                        representing the time in seconds or a string representing the percentage of the\n     *                        video length (for example, \"30%\" or \"30p\").\n     * @return {this}\n     */\n    duration(duration) {\n        return this.addQualifier(new Qualifier('du', this.parseVal(duration)));\n    }\n}\nexport default TrimAction;\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,SAAS,QAAQ,oCAAoC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,SAASF,MAAM,CAAC;EAC5BG,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,CAAC;EACX;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,QAAQA,CAACC,GAAG,EAAE;IACV,OAAO,OAAOA,GAAG,KAAK,QAAQ,GAAGA,GAAG,GAAGA,GAAG,CAACC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC;EAChE;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,WAAWA,CAACC,MAAM,EAAE;IAChB,OAAO,IAAI,CAACC,YAAY,CAAC,IAAIR,SAAS,CAAC,IAAI,EAAE,IAAI,CAACG,QAAQ,CAACI,MAAM,CAAC,CAAC,CAAC;EACxE;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIE,SAASA,CAACF,MAAM,EAAE;IACd,OAAO,IAAI,CAACC,YAAY,CAAC,IAAIR,SAAS,CAAC,IAAI,EAAE,IAAI,CAACG,QAAQ,CAACI,MAAM,CAAC,CAAC,CAAC;EACxE;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIG,QAAQA,CAACA,QAAQ,EAAE;IACf,OAAO,IAAI,CAACF,YAAY,CAAC,IAAIR,SAAS,CAAC,IAAI,EAAE,IAAI,CAACG,QAAQ,CAACO,QAAQ,CAAC,CAAC,CAAC;EAC1E;AACJ;AACA,eAAeT,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}