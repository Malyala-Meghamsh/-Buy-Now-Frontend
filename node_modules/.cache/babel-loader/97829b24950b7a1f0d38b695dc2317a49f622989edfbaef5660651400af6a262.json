{"ast":null,"code":"import { BaseSource } from \"../BaseSource\";\nimport { serializeCloudinaryCharacters } from \"../../../internal/utils/serializeCloudinaryCharacters\";\nimport { Action } from \"../../../internal/Action\";\nimport { Qualifier } from \"../../../internal/qualifier/Qualifier\";\nimport { prepareColor } from \"../../../internal/utils/prepareColor\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.BaseSource}\n * @description Defines the common interface for all text-based sources\n */\nclass BaseTextSource extends BaseSource {\n  constructor(text, textStyle) {\n    super();\n    this.type = 'text';\n    this.text = text;\n    this._textStyle = textStyle;\n  }\n  encodeText(text) {\n    return serializeCloudinaryCharacters(text);\n  }\n  textColor(color) {\n    this._textColor = color;\n    return this;\n  }\n  backgroundColor(bgColor) {\n    this._backgroundColor = bgColor;\n    return this;\n  }\n  /**\n   * @description\n   * Returns the opening string of the layer,\n   * This method is used internally within {@link SDK.LayerAction|LayerAction}\n   * @returns {string}\n   */\n  getOpenSourceString(layerType) {\n    const layerParam = [this.type, this._textStyle && this._textStyle.toString(), this.encodeText(this.text)].filter(a => a).join(':');\n    const tmpAction = new Action();\n    tmpAction.addQualifier(new Qualifier(layerType, layerParam));\n    this._textColor && tmpAction.addQualifier(new Qualifier('co', prepareColor(this._textColor)));\n    this._backgroundColor && tmpAction.addQualifier(new Qualifier('b', prepareColor(this._backgroundColor)));\n    return tmpAction.toString();\n  }\n}\nexport { BaseTextSource };","map":{"version":3,"names":["BaseSource","serializeCloudinaryCharacters","Action","Qualifier","prepareColor","BaseTextSource","constructor","text","textStyle","type","_textStyle","encodeText","textColor","color","_textColor","backgroundColor","bgColor","_backgroundColor","getOpenSourceString","layerType","layerParam","toString","filter","a","join","tmpAction","addQualifier"],"sources":["D:/VSCode/Project_Market_Place/client/node_modules/@cloudinary/base/qualifiers/source/sourceTypes/BaseTextSource.js"],"sourcesContent":["import { BaseSource } from \"../BaseSource\";\nimport { serializeCloudinaryCharacters } from \"../../../internal/utils/serializeCloudinaryCharacters\";\nimport { Action } from \"../../../internal/Action\";\nimport { Qualifier } from \"../../../internal/qualifier/Qualifier\";\nimport { prepareColor } from \"../../../internal/utils/prepareColor\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.BaseSource}\n * @description Defines the common interface for all text-based sources\n */\nclass BaseTextSource extends BaseSource {\n    constructor(text, textStyle) {\n        super();\n        this.type = 'text';\n        this.text = text;\n        this._textStyle = textStyle;\n    }\n    encodeText(text) {\n        return serializeCloudinaryCharacters(text);\n    }\n    textColor(color) {\n        this._textColor = color;\n        return this;\n    }\n    backgroundColor(bgColor) {\n        this._backgroundColor = bgColor;\n        return this;\n    }\n    /**\n     * @description\n     * Returns the opening string of the layer,\n     * This method is used internally within {@link SDK.LayerAction|LayerAction}\n     * @returns {string}\n     */\n    getOpenSourceString(layerType) {\n        const layerParam = [\n            this.type,\n            this._textStyle && this._textStyle.toString(),\n            this.encodeText(this.text)\n        ].filter((a) => a).join(':');\n        const tmpAction = new Action();\n        tmpAction.addQualifier(new Qualifier(layerType, layerParam));\n        this._textColor && tmpAction.addQualifier(new Qualifier('co', prepareColor(this._textColor)));\n        this._backgroundColor && tmpAction.addQualifier(new Qualifier('b', prepareColor(this._backgroundColor)));\n        return tmpAction.toString();\n    }\n}\nexport { BaseTextSource };\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,6BAA6B,QAAQ,uDAAuD;AACrG,SAASC,MAAM,QAAQ,0BAA0B;AACjD,SAASC,SAAS,QAAQ,uCAAuC;AACjE,SAASC,YAAY,QAAQ,sCAAsC;AACnE;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,SAASL,UAAU,CAAC;EACpCM,WAAWA,CAACC,IAAI,EAAEC,SAAS,EAAE;IACzB,KAAK,CAAC,CAAC;IACP,IAAI,CAACC,IAAI,GAAG,MAAM;IAClB,IAAI,CAACF,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACG,UAAU,GAAGF,SAAS;EAC/B;EACAG,UAAUA,CAACJ,IAAI,EAAE;IACb,OAAON,6BAA6B,CAACM,IAAI,CAAC;EAC9C;EACAK,SAASA,CAACC,KAAK,EAAE;IACb,IAAI,CAACC,UAAU,GAAGD,KAAK;IACvB,OAAO,IAAI;EACf;EACAE,eAAeA,CAACC,OAAO,EAAE;IACrB,IAAI,CAACC,gBAAgB,GAAGD,OAAO;IAC/B,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;AACA;EACIE,mBAAmBA,CAACC,SAAS,EAAE;IAC3B,MAAMC,UAAU,GAAG,CACf,IAAI,CAACX,IAAI,EACT,IAAI,CAACC,UAAU,IAAI,IAAI,CAACA,UAAU,CAACW,QAAQ,CAAC,CAAC,EAC7C,IAAI,CAACV,UAAU,CAAC,IAAI,CAACJ,IAAI,CAAC,CAC7B,CAACe,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;IAC5B,MAAMC,SAAS,GAAG,IAAIvB,MAAM,CAAC,CAAC;IAC9BuB,SAAS,CAACC,YAAY,CAAC,IAAIvB,SAAS,CAACgB,SAAS,EAAEC,UAAU,CAAC,CAAC;IAC5D,IAAI,CAACN,UAAU,IAAIW,SAAS,CAACC,YAAY,CAAC,IAAIvB,SAAS,CAAC,IAAI,EAAEC,YAAY,CAAC,IAAI,CAACU,UAAU,CAAC,CAAC,CAAC;IAC7F,IAAI,CAACG,gBAAgB,IAAIQ,SAAS,CAACC,YAAY,CAAC,IAAIvB,SAAS,CAAC,GAAG,EAAEC,YAAY,CAAC,IAAI,CAACa,gBAAgB,CAAC,CAAC,CAAC;IACxG,OAAOQ,SAAS,CAACJ,QAAQ,CAAC,CAAC;EAC/B;AACJ;AACA,SAAShB,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}